<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/util/PDFInvoiceGenerator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/util/PDFInvoiceGenerator.java" />
              <option name="originalContent" value="package util;&#10;&#10;import com.itextpdf.kernel.pdf.PdfDocument;&#10;import com.itextpdf.kernel.pdf.PdfWriter;&#10;import com.itextpdf.layout.Document;&#10;import com.itextpdf.layout.element.Paragraph;&#10;import com.itextpdf.layout.element.Table;&#10;import com.itextpdf.layout.element.Cell;&#10;import com.itextpdf.layout.properties.TextAlignment;&#10;import com.itextpdf.layout.properties.UnitValue;&#10;import com.itextpdf.layout.properties.HorizontalAlignment;&#10;import com.itextpdf.kernel.font.PdfFont;&#10;import com.itextpdf.kernel.font.PdfFontFactory;&#10;import com.itextpdf.io.font.constants.StandardFonts;&#10;&#10;import com.itextpdf.kernel.font.PdfFontFactory.EmbeddingStrategy;&#10;&#10;import model.HoaDon;&#10;import model.ChiTietHoaDon;&#10;import controller.ChiTietHoaDonController;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.math.BigDecimal;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;&#10;public class PDFInvoiceGenerator {&#10;    &#10;    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;    &#10;    public static void generateInvoicePDF(HoaDon hoaDon, String filePath) throws IOException {&#10;        // Create PDF document&#10;        PdfWriter writer = new PdfWriter(filePath);&#10;        PdfDocument pdfDoc = new PdfDocument(writer);&#10;        Document document = new Document(pdfDoc);&#10;        &#10;        try {&#10;            // Set font with Unicode support for Vietnamese&#10;            PdfFont font = createVietnameseFont(false);&#10;            PdfFont boldFont = createVietnameseFont(true);&#10;            &#10;            // Title with proper Vietnamese text&#10;            Paragraph title = new Paragraph(&quot;HÓA ĐƠN BÁN HÀNG&quot;)&#10;                .setFont(boldFont)&#10;                .setFontSize(18)&#10;                .setTextAlignment(TextAlignment.CENTER)&#10;                .setMarginBottom(20);&#10;            document.add(title);&#10;            &#10;            // Invoice information&#10;            addInvoiceInfo(document, hoaDon, font, boldFont);&#10;            &#10;            // Product table&#10;            addProductTable(document, hoaDon, font, boldFont);&#10;            &#10;            // Total&#10;            addTotal(document, hoaDon, font, boldFont);&#10;            &#10;            // Footer&#10;            addFooter(document, font);&#10;            &#10;        } finally {&#10;            document.close();&#10;        }&#10;    }&#10;    &#10;    private static void addInvoiceInfo(Document document, HoaDon hoaDon, PdfFont font, PdfFont boldFont) {&#10;        // Invoice details table&#10;        Table infoTable = new Table(UnitValue.createPercentArray(new float[]{1, 1}));&#10;        infoTable.setWidth(UnitValue.createPercentValue(100));&#10;        &#10;        // Left column with proper Vietnamese text&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Mã hóa đơn: &quot; + hoaDon.getId()).setFont(font)));&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Ngày lập: &quot; + hoaDon.getNgayLap().format(DATE_FORMATTER)).setFont(font)));&#10;        &#10;        String khachHang = hoaDon.getMaKH() != null ? hoaDon.getMaKH().getHoTen() : &quot;Khách lẻ&quot;;&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Khách hàng: &quot; + khachHang).setFont(font)));&#10;        &#10;        String nhanVien = hoaDon.getMaNV() != null ? hoaDon.getMaNV().getHoTen() : &quot;N/A&quot;;&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Nhân viên: &quot; + nhanVien).setFont(font)));&#10;        &#10;        document.add(infoTable);&#10;        document.add(new Paragraph(&quot;\n&quot;));&#10;    }&#10;    &#10;    private static void addProductTable(Document document, HoaDon hoaDon, PdfFont font, PdfFont boldFont) throws IOException {&#10;        // Get invoice details&#10;        ChiTietHoaDonController chiTietController = new ChiTietHoaDonController();&#10;        List&lt;ChiTietHoaDon&gt; chiTietList = chiTietController.getByHoaDonId(hoaDon.getId());&#10;        &#10;        // Product table&#10;        Table productTable = new Table(UnitValue.createPercentArray(new float[]{1, 3, 1, 2, 2}));&#10;        productTable.setWidth(UnitValue.createPercentValue(100));&#10;        &#10;        // Table headers with proper Vietnamese text&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;STT&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Tên sản phẩm&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Số lượng&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Đơn giá&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Thành tiền&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#10;        &#10;        // Table data&#10;        int stt = 1;&#10;        for (ChiTietHoaDon chiTiet : chiTietList) {&#10;            productTable.addCell(new Cell().add(new Paragraph(String.valueOf(stt++)).setFont(font)).setTextAlignment(TextAlignment.CENTER));&#10;            &#10;            String tenSanPham = &quot;N/A&quot;;&#10;            if (chiTiet.getMaBienThe() != null &amp;&amp; chiTiet.getMaBienThe().getMaSP() != null) {&#10;                tenSanPham = chiTiet.getMaBienThe().getMaSP().getTenSP();&#10;                if (chiTiet.getMaBienThe().getMaMau() != null) {&#10;                    tenSanPham += &quot; - &quot; + chiTiet.getMaBienThe().getMaMau().getTenMau();&#10;                }&#10;                if (chiTiet.getMaBienThe().getMaSize() != null) {&#10;                    tenSanPham += &quot; - &quot; + chiTiet.getMaBienThe().getMaSize().getTenSize();&#10;                }&#10;            }&#10;            productTable.addCell(new Cell().add(new Paragraph(tenSanPham).setFont(font)));&#10;            &#10;            productTable.addCell(new Cell().add(new Paragraph(String.valueOf(chiTiet.getSoLuong())).setFont(font)).setTextAlignment(TextAlignment.CENTER));&#10;            productTable.addCell(new Cell().add(new Paragraph(formatCurrency(chiTiet.getDonGia())).setFont(font)).setTextAlignment(TextAlignment.RIGHT));&#10;            productTable.addCell(new Cell().add(new Paragraph(formatCurrency(chiTiet.getThanhTien())).setFont(font)).setTextAlignment(TextAlignment.RIGHT));&#10;        }&#10;        &#10;        document.add(productTable);&#10;        document.add(new Paragraph(&quot;\n&quot;));&#10;    }&#10;    &#10;    private static void addTotal(Document document, HoaDon hoaDon, PdfFont font, PdfFont boldFont) {&#10;        Table totalTable = new Table(UnitValue.createPercentArray(new float[]{3, 1}));&#10;        totalTable.setWidth(UnitValue.createPercentValue(60));&#10;        totalTable.setHorizontalAlignment(HorizontalAlignment.RIGHT);&#10;        &#10;        totalTable.addCell(new Cell().add(new Paragraph(&quot;TỔNG TIỀN:&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.RIGHT));&#10;        totalTable.addCell(new Cell().add(new Paragraph(formatCurrency(hoaDon.getTongTien())).setFont(boldFont)).setTextAlignment(TextAlignment.RIGHT));&#10;        &#10;        document.add(totalTable);&#10;        document.add(new Paragraph(&quot;\n&quot;));&#10;    }&#10;    &#10;    private static void addFooter(Document document, PdfFont font) {&#10;        Paragraph footer = new Paragraph(&quot;Cảm ơn quý khách đã mua hàng!&quot;)&#10;            .setFont(font)&#10;            .setFontSize(12)&#10;            .setTextAlignment(TextAlignment.CENTER)&#10;            .setMarginTop(30);&#10;        document.add(footer);&#10;        &#10;        Paragraph signature = new Paragraph(&quot;Nhân viên bán hàng&quot;)&#10;            .setFont(font)&#10;            .setFontSize(10)&#10;            .setTextAlignment(TextAlignment.RIGHT)&#10;            .setMarginTop(50);&#10;        document.add(signature);&#10;    }&#10;    &#10;    private static String formatCurrency(BigDecimal amount) {&#10;        if (amount == null) return &quot;0 VND&quot;;&#10;        return String.format(&quot;%,.0f VND&quot;, amount);&#10;    }&#10;    &#10;    /**&#10;     * Creates a font that supports Vietnamese Unicode characters&#10;     */&#10;    private static PdfFont createVietnameseFont(boolean bold) throws IOException {&#10;        try {&#10;            // Try to use system fonts that support Vietnamese&#10;            String[] fontPaths = {&#10;                // Windows fonts&#10;                &quot;C:/Windows/Fonts/arial.ttf&quot;,&#10;                &quot;C:/Windows/Fonts/arialbd.ttf&quot;, &#10;                &quot;C:/Windows/Fonts/calibri.ttf&quot;,&#10;                &quot;C:/Windows/Fonts/calibrib.ttf&quot;,&#10;                // Linux fonts&#10;                &quot;/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf&quot;,&#10;                &quot;/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf&quot;,&#10;                // macOS fonts&#10;                &quot;/System/Library/Fonts/Arial.ttf&quot;,&#10;                &quot;/System/Library/Fonts/Arial Bold.ttf&quot;&#10;            };&#10;            &#10;            // Try to find and use a system font&#10;            for (String fontPath : fontPaths) {&#10;                try {&#10;                    File fontFile = new File(fontPath);&#10;                    if (fontFile.exists()) {&#10;                        if (bold &amp;&amp; (fontPath.contains(&quot;bd&quot;) || fontPath.contains(&quot;Bold&quot;))) {&#10;                            return PdfFontFactory.createFont(fontPath, &quot;Identity-H&quot;, EmbeddingStrategy.PREFER_EMBEDDED);&#10;                        } else if (!bold &amp;&amp; !fontPath.contains(&quot;bd&quot;) &amp;&amp; !fontPath.contains(&quot;Bold&quot;)) {&#10;                            return PdfFontFactory.createFont(fontPath, &quot;Identity-H&quot;, EmbeddingStrategy.PREFER_EMBEDDED);&#10;                        }&#10;                    }&#10;                } catch (Exception e) {&#10;                    // Continue to next font&#10;                }&#10;            }&#10;            &#10;            // Fallback: Use built-in font with Identity-H encoding for better Unicode support&#10;            return PdfFontFactory.createFont(bold ? StandardFonts.HELVETICA_BOLD : StandardFonts.HELVETICA, &#10;                                           &quot;Identity-H&quot;, EmbeddingStrategy.PREFER_NOT_EMBEDDED);&#10;            &#10;        } catch (Exception e) {&#10;            // Final fallback: Standard font&#10;            return PdfFontFactory.createFont(bold ? StandardFonts.HELVETICA_BOLD : StandardFonts.HELVETICA);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package util;&#13;&#10;&#13;&#10;import com.itextpdf.kernel.pdf.PdfDocument;&#13;&#10;import com.itextpdf.kernel.pdf.PdfWriter;&#13;&#10;import com.itextpdf.layout.Document;&#13;&#10;import com.itextpdf.layout.element.Paragraph;&#13;&#10;import com.itextpdf.layout.element.Table;&#13;&#10;import com.itextpdf.layout.element.Cell;&#13;&#10;import com.itextpdf.layout.properties.TextAlignment;&#13;&#10;import com.itextpdf.layout.properties.UnitValue;&#13;&#10;import com.itextpdf.layout.properties.HorizontalAlignment;&#13;&#10;import com.itextpdf.kernel.font.PdfFont;&#13;&#10;import com.itextpdf.kernel.font.PdfFontFactory;&#13;&#10;import com.itextpdf.io.font.constants.StandardFonts;&#13;&#10;&#13;&#10;import com.itextpdf.kernel.font.PdfFontFactory.EmbeddingStrategy;&#13;&#10;&#13;&#10;import model.HoaDon;&#13;&#10;import model.ChiTietHoaDon;&#13;&#10;import controller.ChiTietHoaDonController;&#13;&#10;&#13;&#10;import java.io.File;&#13;&#10;import java.io.IOException;&#13;&#10;import java.math.BigDecimal;&#13;&#10;import java.time.format.DateTimeFormatter;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class PDFInvoiceGenerator {&#13;&#10;    &#13;&#10;    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#13;&#10;    &#13;&#10;    public static void generateInvoicePDF(HoaDon hoaDon, String filePath) throws IOException {&#13;&#10;        // Create PDF document&#13;&#10;        PdfWriter writer = new PdfWriter(filePath);&#13;&#10;        PdfDocument pdfDoc = new PdfDocument(writer);&#13;&#10;        Document document = new Document(pdfDoc);&#13;&#10;        &#13;&#10;        try {&#13;&#10;            // Set font with Unicode support for Vietnamese&#13;&#10;            PdfFont font = createVietnameseFont(false);&#13;&#10;            PdfFont boldFont = createVietnameseFont(true);&#13;&#10;            &#13;&#10;            // Title with proper Vietnamese text&#13;&#10;            Paragraph title = new Paragraph(&quot;HÓA ĐƠN BÁN HÀNG&quot;)&#13;&#10;                .setFont(boldFont)&#13;&#10;                .setFontSize(18)&#13;&#10;                .setTextAlignment(TextAlignment.CENTER)&#13;&#10;                .setMarginBottom(20);&#13;&#10;            document.add(title);&#13;&#10;            &#13;&#10;            // Invoice information&#13;&#10;            addInvoiceInfo(document, hoaDon, font, boldFont);&#13;&#10;            &#13;&#10;            // Product table&#13;&#10;            addProductTable(document, hoaDon, font, boldFont);&#13;&#10;            &#13;&#10;            // Total&#13;&#10;            addTotal(document, hoaDon, font, boldFont);&#13;&#10;            &#13;&#10;            // Footer&#13;&#10;            addFooter(document, font);&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            document.close();&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    private static void addInvoiceInfo(Document document, HoaDon hoaDon, PdfFont font, PdfFont boldFont) {&#13;&#10;        // Invoice details table&#13;&#10;        Table infoTable = new Table(UnitValue.createPercentArray(new float[]{1, 1}));&#13;&#10;        infoTable.setWidth(UnitValue.createPercentValue(100));&#13;&#10;        &#13;&#10;        // Left column with proper Vietnamese text&#13;&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Mã hóa đơn: &quot; + hoaDon.getId()).setFont(font)));&#13;&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Ngày lập: &quot; + hoaDon.getNgayLap().format(DATE_FORMATTER)).setFont(font)));&#13;&#10;        &#13;&#10;        // Safely access customer name to avoid lazy loading issues&#13;&#10;        String khachHang = &quot;Khách lẻ&quot;;&#13;&#10;        try {&#13;&#10;            if (hoaDon.getMaKH() != null) {&#13;&#10;                khachHang = hoaDon.getMaKH().getHoTen();&#13;&#10;                if (khachHang == null || khachHang.trim().isEmpty()) {&#13;&#10;                    khachHang = &quot;Khách lẻ&quot;;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            // Handle proxy initialization errors&#13;&#10;            khachHang = &quot;Khách lẻ&quot;;&#13;&#10;        }&#13;&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Khách hàng: &quot; + khachHang).setFont(font)));&#13;&#10;        &#13;&#10;        // Safely access employee name to avoid lazy loading issues&#13;&#10;        String nhanVien = &quot;N/A&quot;;&#13;&#10;        try {&#13;&#10;            if (hoaDon.getMaNV() != null) {&#13;&#10;                nhanVien = hoaDon.getMaNV().getHoTen();&#13;&#10;                if (nhanVien == null || nhanVien.trim().isEmpty()) {&#13;&#10;                    nhanVien = &quot;N/A&quot;;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            // Handle proxy initialization errors&#13;&#10;            nhanVien = &quot;N/A&quot;;&#13;&#10;        }&#13;&#10;        infoTable.addCell(new Cell().add(new Paragraph(&quot;Nhân viên: &quot; + nhanVien).setFont(font)));&#13;&#10;        &#13;&#10;        document.add(infoTable);&#13;&#10;        document.add(new Paragraph(&quot;\n&quot;));&#13;&#10;    }&#13;&#10;    &#13;&#10;    private static void addProductTable(Document document, HoaDon hoaDon, PdfFont font, PdfFont boldFont) throws IOException {&#13;&#10;        // Get invoice details&#13;&#10;        ChiTietHoaDonController chiTietController = new ChiTietHoaDonController();&#13;&#10;        List&lt;ChiTietHoaDon&gt; chiTietList = chiTietController.getByHoaDonId(hoaDon.getId());&#13;&#10;        &#13;&#10;        // Product table&#13;&#10;        Table productTable = new Table(UnitValue.createPercentArray(new float[]{1, 3, 1, 2, 2}));&#13;&#10;        productTable.setWidth(UnitValue.createPercentValue(100));&#13;&#10;        &#13;&#10;        // Table headers with proper Vietnamese text&#13;&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;STT&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#13;&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Tên sản phẩm&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#13;&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Số lượng&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#13;&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Đơn giá&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#13;&#10;        productTable.addHeaderCell(new Cell().add(new Paragraph(&quot;Thành tiền&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.CENTER));&#13;&#10;        &#13;&#10;        // Table data&#13;&#10;        int stt = 1;&#13;&#10;        for (ChiTietHoaDon chiTiet : chiTietList) {&#13;&#10;            productTable.addCell(new Cell().add(new Paragraph(String.valueOf(stt++)).setFont(font)).setTextAlignment(TextAlignment.CENTER));&#13;&#10;            &#13;&#10;            // Safely build product name to avoid lazy loading issues&#13;&#10;            String tenSanPham = &quot;N/A&quot;;&#13;&#10;            try {&#13;&#10;                if (chiTiet.getMaBienThe() != null &amp;&amp; chiTiet.getMaBienThe().getMaSP() != null) {&#13;&#10;                    tenSanPham = chiTiet.getMaBienThe().getMaSP().getTenSP();&#13;&#10;                    if (tenSanPham == null || tenSanPham.trim().isEmpty()) {&#13;&#10;                        tenSanPham = &quot;N/A&quot;;&#13;&#10;                    } else {&#13;&#10;                        // Add color and size information if available&#13;&#10;                        try {&#13;&#10;                            if (chiTiet.getMaBienThe().getMaMau() != null) {&#13;&#10;                                String mauSac = chiTiet.getMaBienThe().getMaMau().getTenMau();&#13;&#10;                                if (mauSac != null &amp;&amp; !mauSac.trim().isEmpty()) {&#13;&#10;                                    tenSanPham += &quot; - &quot; + mauSac;&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        } catch (Exception e) {&#13;&#10;                            // Ignore color loading errors&#13;&#10;                        }&#13;&#10;                        &#13;&#10;                        try {&#13;&#10;                            if (chiTiet.getMaBienThe().getMaSize() != null) {&#13;&#10;                                String kichThuoc = chiTiet.getMaBienThe().getMaSize().getTenSize();&#13;&#10;                                if (kichThuoc != null &amp;&amp; !kichThuoc.trim().isEmpty()) {&#13;&#10;                                    tenSanPham += &quot; - &quot; + kichThuoc;&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        } catch (Exception e) {&#13;&#10;                            // Ignore size loading errors&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            } catch (Exception e) {&#13;&#10;                // Handle proxy initialization errors&#13;&#10;                tenSanPham = &quot;N/A&quot;;&#13;&#10;            }&#13;&#10;            productTable.addCell(new Cell().add(new Paragraph(tenSanPham).setFont(font)));&#13;&#10;            &#13;&#10;            productTable.addCell(new Cell().add(new Paragraph(String.valueOf(chiTiet.getSoLuong())).setFont(font)).setTextAlignment(TextAlignment.CENTER));&#13;&#10;            productTable.addCell(new Cell().add(new Paragraph(formatCurrency(chiTiet.getDonGia())).setFont(font)).setTextAlignment(TextAlignment.RIGHT));&#13;&#10;            productTable.addCell(new Cell().add(new Paragraph(formatCurrency(chiTiet.getThanhTien())).setFont(font)).setTextAlignment(TextAlignment.RIGHT));&#13;&#10;        }&#13;&#10;        &#13;&#10;        document.add(productTable);&#13;&#10;        document.add(new Paragraph(&quot;\n&quot;));&#13;&#10;    }&#13;&#10;    &#13;&#10;    private static void addTotal(Document document, HoaDon hoaDon, PdfFont font, PdfFont boldFont) {&#13;&#10;        Table totalTable = new Table(UnitValue.createPercentArray(new float[]{3, 1}));&#13;&#10;        totalTable.setWidth(UnitValue.createPercentValue(60));&#13;&#10;        totalTable.setHorizontalAlignment(HorizontalAlignment.RIGHT);&#13;&#10;        &#13;&#10;        totalTable.addCell(new Cell().add(new Paragraph(&quot;TỔNG TIỀN:&quot;).setFont(boldFont)).setTextAlignment(TextAlignment.RIGHT));&#13;&#10;        totalTable.addCell(new Cell().add(new Paragraph(formatCurrency(hoaDon.getTongTien())).setFont(boldFont)).setTextAlignment(TextAlignment.RIGHT));&#13;&#10;        &#13;&#10;        document.add(totalTable);&#13;&#10;        document.add(new Paragraph(&quot;\n&quot;));&#13;&#10;    }&#13;&#10;    &#13;&#10;    private static void addFooter(Document document, PdfFont font) {&#13;&#10;        Paragraph footer = new Paragraph(&quot;Cảm ơn quý khách đã mua hàng!&quot;)&#13;&#10;            .setFont(font)&#13;&#10;            .setFontSize(12)&#13;&#10;            .setTextAlignment(TextAlignment.CENTER)&#13;&#10;            .setMarginTop(30);&#13;&#10;        document.add(footer);&#13;&#10;        &#13;&#10;        Paragraph signature = new Paragraph(&quot;Nhân viên bán hàng&quot;)&#13;&#10;            .setFont(font)&#13;&#10;            .setFontSize(10)&#13;&#10;            .setTextAlignment(TextAlignment.RIGHT)&#13;&#10;            .setMarginTop(50);&#13;&#10;        document.add(signature);&#13;&#10;    }&#13;&#10;    &#13;&#10;    private static String formatCurrency(BigDecimal amount) {&#13;&#10;        if (amount == null) return &quot;0 VND&quot;;&#13;&#10;        return String.format(&quot;%,.0f VND&quot;, amount);&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Creates a font that supports Vietnamese Unicode characters&#13;&#10;     */&#13;&#10;    private static PdfFont createVietnameseFont(boolean bold) throws IOException {&#13;&#10;        try {&#13;&#10;            // Try to use system fonts that support Vietnamese&#13;&#10;            String[] fontPaths = {&#13;&#10;                // Windows fonts&#13;&#10;                &quot;C:/Windows/Fonts/arial.ttf&quot;,&#13;&#10;                &quot;C:/Windows/Fonts/arialbd.ttf&quot;, &#13;&#10;                &quot;C:/Windows/Fonts/calibri.ttf&quot;,&#13;&#10;                &quot;C:/Windows/Fonts/calibrib.ttf&quot;,&#13;&#10;                // Linux fonts&#13;&#10;                &quot;/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf&quot;,&#13;&#10;                &quot;/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf&quot;,&#13;&#10;                // macOS fonts&#13;&#10;                &quot;/System/Library/Fonts/Arial.ttf&quot;,&#13;&#10;                &quot;/System/Library/Fonts/Arial Bold.ttf&quot;&#13;&#10;            };&#13;&#10;            &#13;&#10;            // Try to find and use a system font&#13;&#10;            for (String fontPath : fontPaths) {&#13;&#10;                try {&#13;&#10;                    File fontFile = new File(fontPath);&#13;&#10;                    if (fontFile.exists()) {&#13;&#10;                        if (bold &amp;&amp; (fontPath.contains(&quot;bd&quot;) || fontPath.contains(&quot;Bold&quot;))) {&#13;&#10;                            return PdfFontFactory.createFont(fontPath, &quot;Identity-H&quot;, EmbeddingStrategy.PREFER_EMBEDDED);&#13;&#10;                        } else if (!bold &amp;&amp; !fontPath.contains(&quot;bd&quot;) &amp;&amp; !fontPath.contains(&quot;Bold&quot;)) {&#13;&#10;                            return PdfFontFactory.createFont(fontPath, &quot;Identity-H&quot;, EmbeddingStrategy.PREFER_EMBEDDED);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                } catch (Exception e) {&#13;&#10;                    // Continue to next font&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &#13;&#10;            // Fallback: Use built-in font with Identity-H encoding for better Unicode support&#13;&#10;            return PdfFontFactory.createFont(bold ? StandardFonts.HELVETICA_BOLD : StandardFonts.HELVETICA, &#13;&#10;                                           &quot;Identity-H&quot;, EmbeddingStrategy.PREFER_NOT_EMBEDDED);&#13;&#10;            &#13;&#10;        } catch (Exception e) {&#13;&#10;            // Final fallback: Standard font&#13;&#10;            return PdfFontFactory.createFont(bold ? StandardFonts.HELVETICA_BOLD : StandardFonts.HELVETICA);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/view/HoaDonUI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/view/HoaDonUI.java" />
              <option name="originalContent" value="package view;&#10;&#10;import controller.BienTheSanPhamController;&#10;import controller.ChiTietHoaDonController;&#10;import controller.HoaDonController;&#10;import controller.KhachHangController;&#10;import controller.NhanVienController;&#10;import controller.HinhThucThanhToanController;&#10;import model.*;&#10;import util.SessionManager;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.List;&#10;import java.io.File;&#10;import util.PDFInvoiceGenerator;&#10;&#10;public class HoaDonUI extends JFrame {&#10;    private JTextField txtMaHD, txtNgayLap, txtTongTien, txtSelectedEmployee, txtSelectedCustomer, txtCustomerName;&#10;    private JButton btnSelectEmployee, btnSelectCustomer;&#10;    private JRadioButton radioKhachLe, radioHoiVien;&#10;    private ButtonGroup customerTypeGroup;&#10;    private JComboBox&lt;HinhThucThanhToan&gt; cboHinhThucThanhToan;&#10;    private JComboBox&lt;String&gt; cboTrangThaiThanhToan;&#10;    private JButton btnAdd, btnUpdate, btnDelete, btnRefresh, btnViewDetails, btnAddDetail, btnPrintPDF;&#10;    private JTable tableHoaDon;&#10;    private DefaultTableModel tableModelHoaDon;&#10;    private NhanVien selectedEmployee = null;&#10;    private KhachHang selectedCustomer = null;&#10;&#10;    private HoaDonController hoaDonController;&#10;    private KhachHangController khachHangController;&#10;    private NhanVienController nhanVienController;&#10;    private ChiTietHoaDonController chiTietController;&#10;    private BienTheSanPhamController bienTheController;&#10;    private HinhThucThanhToanController hinhThucThanhToanController;&#10;&#10;    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;&#10;    public HoaDonUI() {&#10;        initControllers();&#10;        setTitle(&quot;Quản Lý Hóa Đơn&quot;);&#10;        setSize(900, 600);&#10;        setLocationRelativeTo(null);&#10;        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);&#10;        initComponents();&#10;        loadData();&#10;    }&#10;&#10;    private void initControllers() {&#10;        hoaDonController = new HoaDonController();&#10;        khachHangController = new KhachHangController();&#10;        nhanVienController = new NhanVienController();&#10;        chiTietController = new ChiTietHoaDonController();&#10;        bienTheController = new BienTheSanPhamController();&#10;        hinhThucThanhToanController = new HinhThucThanhToanController();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;&#10;        JPanel topPanel = createInputPanel();&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        JPanel centerPanel = createTablePanel();&#10;        add(centerPanel, BorderLayout.CENTER);&#10;&#10;        JPanel bottomPanel = createButtonPanel();&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        setupEventHandlers();&#10;    }&#10;&#10;    private JPanel createInputPanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin hóa đơn&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        // Row 1&#10;        gbc.gridx = 0; gbc.gridy = 0; gbc.anchor = GridBagConstraints.WEST;&#10;        panel.add(new JLabel(&quot;Mã HĐ:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtMaHD = new JTextField(10);&#10;        txtMaHD.setEditable(false);&#10;        panel.add(txtMaHD, gbc);&#10;&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Ngày lập:&quot;), gbc);&#10;        gbc.gridx = 3; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtNgayLap = new JTextField(10);&#10;        txtNgayLap.setText(LocalDate.now().format(dateFormatter));&#10;        panel.add(txtNgayLap, gbc);&#10;&#10;        // Row 2 - Customer selection&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Khách hàng:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtSelectedCustomer = new JTextField();&#10;        txtSelectedCustomer.setEditable(false);&#10;        txtSelectedCustomer.setPreferredSize(new Dimension(150, 25));&#10;        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;        panel.add(txtSelectedCustomer, gbc);&#10;&#10;        // Radio buttons for customer type&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        radioKhachLe = new JRadioButton(&quot;Khách lẻ&quot;);&#10;        radioKhachLe.setSelected(true);&#10;        panel.add(radioKhachLe, gbc);&#10;&#10;        gbc.gridx = 3;&#10;        radioHoiVien = new JRadioButton(&quot;Hội viên&quot;);&#10;        panel.add(radioHoiVien, gbc);&#10;&#10;        // Customer selection button - moved after radio buttons&#10;        gbc.gridx = 4; gbc.fill = GridBagConstraints.NONE;&#10;        btnSelectCustomer = new JButton(&quot;Chọn KH&quot;);&#10;        btnSelectCustomer.setPreferredSize(new Dimension(90, 25));&#10;        panel.add(btnSelectCustomer, gbc);&#10;        btnSelectCustomer.setVisible(false);&#10;&#10;        // Row 3 - Employee selection&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Nhân viên:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtSelectedEmployee = new JTextField();&#10;        txtSelectedEmployee.setEditable(false);&#10;        txtSelectedEmployee.setPreferredSize(new Dimension(150, 25));&#10;        panel.add(txtSelectedEmployee, gbc);&#10;&#10;        customerTypeGroup = new ButtonGroup();&#10;        customerTypeGroup.add(radioKhachLe);&#10;        customerTypeGroup.add(radioHoiVien);&#10;&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        btnSelectEmployee = new JButton(&quot;Chọn NV&quot;);&#10;        btnSelectEmployee.setPreferredSize(new Dimension(90, 25));&#10;        panel.add(btnSelectEmployee, gbc);&#10;&#10;        gbc.gridx = 3; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Tổng tiền:&quot;), gbc);&#10;        gbc.gridx = 4; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtTongTien = new JTextField(10);&#10;        txtTongTien.setEditable(false);&#10;        txtTongTien.setBackground(Color.LIGHT_GRAY);&#10;        panel.add(txtTongTien, gbc);&#10;&#10;        // Row 4 - Payment method and status&#10;        gbc.gridx = 0; gbc.gridy = 3; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Hình thức TT:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        cboHinhThucThanhToan = new JComboBox&lt;&gt;();&#10;        cboHinhThucThanhToan.setPreferredSize(new Dimension(150, 25));&#10;        cboHinhThucThanhToan.setRenderer(new DefaultListCellRenderer() {&#10;            @Override&#10;            public Component getListCellRendererComponent(JList&lt;?&gt; list, Object value, int index, boolean isSelected, boolean cellHasFocus) {&#10;                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);&#10;                if (value instanceof HinhThucThanhToan) {&#10;                    HinhThucThanhToan httt = (HinhThucThanhToan) value;&#10;                    setText(httt.getTenHTTT());&#10;                } else if (value == null) {&#10;                    setText(&quot;-- Chọn hình thức thanh toán --&quot;);&#10;                }&#10;                return this;&#10;            }&#10;        });&#10;        panel.add(cboHinhThucThanhToan, gbc);&#10;&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Trạng thái TT:&quot;), gbc);&#10;        gbc.gridx = 3; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        cboTrangThaiThanhToan = new JComboBox&lt;&gt;();&#10;        cboTrangThaiThanhToan.setPreferredSize(new Dimension(150, 25));&#10;        panel.add(cboTrangThaiThanhToan, gbc);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private JPanel createTablePanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Danh sách hóa đơn&quot;));&#10;&#10;        tableModelHoaDon = new DefaultTableModel(&#10;                new Object[]{&quot;Mã HĐ&quot;, &quot;Ngày lập&quot;, &quot;Khách hàng&quot;, &quot;Nhân viên&quot;, &quot;Tổng tiền&quot;, &quot;Số items&quot;}, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false;&#10;            }&#10;        };&#10;&#10;        tableHoaDon = new JTable(tableModelHoaDon);&#10;        tableHoaDon.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        tableHoaDon.getTableHeader().setReorderingAllowed(false);&#10;&#10;        // Set column widths&#10;        tableHoaDon.getColumnModel().getColumn(0).setPreferredWidth(60);&#10;        tableHoaDon.getColumnModel().getColumn(1).setPreferredWidth(100);&#10;        tableHoaDon.getColumnModel().getColumn(2).setPreferredWidth(150);&#10;        tableHoaDon.getColumnModel().getColumn(3).setPreferredWidth(150);&#10;        tableHoaDon.getColumnModel().getColumn(4).setPreferredWidth(120);&#10;        tableHoaDon.getColumnModel().getColumn(5).setPreferredWidth(80);&#10;&#10;        JScrollPane scrollPane = new JScrollPane(tableHoaDon);&#10;        panel.add(scrollPane, BorderLayout.CENTER);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private JPanel createButtonPanel() {&#10;        JPanel panel = new JPanel(new FlowLayout());&#10;&#10;        btnAdd = new JButton(&quot;Thêm mới&quot;);&#10;        btnAdd.setPreferredSize(new Dimension(110, 30));&#10;        btnUpdate = new JButton(&quot;Cập nhật&quot;);&#10;        btnUpdate.setPreferredSize(new Dimension(100, 30));&#10;        btnDelete = new JButton(&quot;Xóa&quot;);&#10;        btnDelete.setPreferredSize(new Dimension(80, 30));&#10;        btnViewDetails = new JButton(&quot;Xem chi tiết&quot;);&#10;        btnViewDetails.setPreferredSize(new Dimension(120, 30));&#10;        btnAddDetail = new JButton(&quot;Thêm sản phẩm&quot;);&#10;        btnAddDetail.setPreferredSize(new Dimension(140, 30));&#10;        btnRefresh = new JButton(&quot;Làm mới&quot;);&#10;        btnRefresh.setPreferredSize(new Dimension(100, 30));&#10;        btnPrintPDF = new JButton(&quot;In PDF&quot;);&#10;        btnPrintPDF.setPreferredSize(new Dimension(100, 30));&#10;&#10;        panel.add(btnAdd);&#10;        panel.add(btnUpdate);&#10;        panel.add(btnDelete);&#10;        panel.add(Box.createHorizontalStrut(10));&#10;        panel.add(btnViewDetails);&#10;        panel.add(btnAddDetail);&#10;        panel.add(Box.createHorizontalStrut(10));&#10;        panel.add(btnRefresh);&#10;        panel.add(btnPrintPDF);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        btnAdd.addActionListener(e -&gt; addHoaDon());&#10;        btnUpdate.addActionListener(e -&gt; updateHoaDon());&#10;        btnDelete.addActionListener(e -&gt; deleteHoaDon());&#10;        btnViewDetails.addActionListener(e -&gt; viewHoaDonDetails());&#10;        btnAddDetail.addActionListener(e -&gt; addProductToHoaDon());&#10;        btnRefresh.addActionListener(e -&gt; {&#10;            clearFields();&#10;            loadData();&#10;        });&#10;        btnPrintPDF.addActionListener(e -&gt; printInvoiceToPDF());&#10;        btnSelectEmployee.addActionListener(e -&gt; selectEmployeeDialog());&#10;        btnSelectCustomer.addActionListener(e -&gt; selectCustomerDialog());&#10;&#10;        // Add radio button event handlers&#10;        radioKhachLe.addActionListener(e -&gt; {&#10;            if (radioKhachLe.isSelected()) {&#10;                selectedCustomer = null;&#10;                txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;                btnSelectCustomer.setVisible(false);&#10;            }&#10;        });&#10;&#10;        radioHoiVien.addActionListener(e -&gt; {&#10;            if (radioHoiVien.isSelected()) {&#10;                btnSelectCustomer.setVisible(true);&#10;                if (selectedCustomer == null) {&#10;                    txtSelectedCustomer.setText(&quot;&quot;);&#10;                }&#10;            }&#10;        });&#10;&#10;        tableHoaDon.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting()) {&#10;                fillFieldsFromTable();&#10;            }&#10;        });&#10;&#10;    }&#10;&#10;    private void loadData() {&#10;        loadHoaDonTable();&#10;        loadComboBoxes();&#10;    }&#10;&#10;    private void loadHoaDonTable() {&#10;        tableModelHoaDon.setRowCount(0);&#10;        try {&#10;            // Use eager fetch to avoid lazy initialization when rendering table&#10;            List&lt;HoaDon&gt; list = hoaDonController.getAllHoaDonWithDetails();&#10;            for (HoaDon hd : list) {&#10;                Object[] row = {&#10;                        hd.getId(),&#10;                        hd.getNgayLap().format(dateFormatter),&#10;                        hd.getMaKH() != null ? hd.getMaKH().getHoTen() : &quot;Khách lẻ&quot;,&#10;                        hd.getMaNV() != null ? hd.getMaNV().getHoTen() : &quot;N/A&quot;,&#10;                        String.format(&quot;%,.0f VNĐ&quot;, hd.getTongTien()),&#10;                        hd.getTotalItems()&#10;                };&#10;                tableModelHoaDon.addRow(row);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi khi tải dữ liệu: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void loadComboBoxes() {&#10;        try {&#10;            // Set current user as default employee&#10;            try {&#10;                TaiKhoan currentUser = SessionManager.getInstance().getCurrentUser();&#10;                if (currentUser != null &amp;&amp; currentUser.getMaNV() != null) {&#10;                    selectedEmployee = currentUser.getMaNV();&#10;                    txtSelectedEmployee.setText(selectedEmployee.getHoTen() + &quot; - &quot; + selectedEmployee.getChucVu());&#10;                }&#10;            } catch (Exception ex) {&#10;                // If there's an issue with current user, just continue without setting default&#10;            }&#10;&#10;            // Load payment methods&#10;            DefaultComboBoxModel&lt;HinhThucThanhToan&gt; paymentMethodModel = new DefaultComboBoxModel&lt;&gt;();&#10;            cboHinhThucThanhToan.setModel(paymentMethodModel);&#10;            paymentMethodModel.addElement(null); // Add empty option&#10;            &#10;            List&lt;HinhThucThanhToan&gt; paymentMethods = hinhThucThanhToanController.getActiveHinhThucThanhToan();&#10;            for (HinhThucThanhToan method : paymentMethods) {&#10;                paymentMethodModel.addElement(method);&#10;            }&#10;            cboHinhThucThanhToan.setSelectedIndex(0); // Select empty option&#10;&#10;            // Load payment statuses&#10;            DefaultComboBoxModel&lt;String&gt; paymentStatusModel = new DefaultComboBoxModel&lt;&gt;();&#10;            cboTrangThaiThanhToan.setModel(paymentStatusModel);&#10;            paymentStatusModel.addElement(null);&#10;            paymentStatusModel.addElement(&quot;PENDING&quot;);&#10;            paymentStatusModel.addElement(&quot;COMPLETED&quot;);&#10;            paymentStatusModel.addElement(&quot;FAILED&quot;);&#10;            cboTrangThaiThanhToan.setSelectedIndex(0); // Default to &quot;Chưa thanh toán&quot;&#10;&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi khi tải combo box: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void selectEmployeeDialog() {&#10;        NhanVien employee = EmployeeSelectionDialog.showDialog(this);&#10;        if (employee != null) {&#10;            selectedEmployee = employee;&#10;&#10;        }&#10;    }&#10;&#10;    private void selectCustomerDialog() {&#10;        KhachHang customer = CustomerSelectionDialog.showDialog(this);&#10;        if (customer != null) {&#10;            selectedCustomer = customer;&#10;            txtSelectedCustomer.setText(customer.getHoTen());&#10;        }&#10;    }&#10;&#10;    private void setGuestCustomer() {&#10;        selectedCustomer = null;&#10;        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;    }&#10;    private void addHoaDon() {&#10;        try {&#10;            LocalDate ngayLap = parseDate(txtNgayLap.getText().trim());&#10;&#10;            if (selectedEmployee == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn nhân viên!&quot;);&#10;                return;&#10;            }&#10;&#10;            HoaDon hd = new HoaDon(ngayLap, selectedCustomer, selectedEmployee);&#10;            hoaDonController.addHoaDon(hd);&#10;&#10;            JOptionPane.showMessageDialog(this, &quot;Thêm hóa đơn thành công!&quot;);&#10;            loadHoaDonTable();&#10;&#10;        } catch (DateTimeParseException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Ngày lập không hợp lệ! Định dạng: dd/MM/yyyy&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void updateHoaDon() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để cập nhật!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            HoaDon hd = hoaDonController.getHoaDonById(id);&#10;&#10;            if (hd == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;);&#10;                return;&#10;            }&#10;&#10;            // Set payment method and status&#10;            HinhThucThanhToan selectedPaymentMethod = (HinhThucThanhToan) cboHinhThucThanhToan.getSelectedItem();&#10;            if (selectedPaymentMethod != null) {&#10;                hd.setMaHTTT(selectedPaymentMethod.getMaHTTT());&#10;            }&#10;&#10;            String selectedPaymentStatus = (String) cboTrangThaiThanhToan.getSelectedItem();&#10;            if (selectedPaymentStatus != null) {&#10;                hd.setTrangThaiThanhToan(selectedPaymentStatus);&#10;            }&#10;&#10;&#10;            LocalDate ngayLap = parseDate(txtNgayLap.getText().trim());&#10;&#10;            if (selectedEmployee == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn nhân viên!&quot;);&#10;                return;&#10;            }&#10;&#10;            hd.setNgayLap(ngayLap);&#10;            hd.setMaKH(selectedCustomer);&#10;            hd.setMaNV(selectedEmployee);&#10;&#10;            hoaDonController.updateHoaDon(hd);&#10;&#10;            JOptionPane.showMessageDialog(this, &quot;Cập nhật hóa đơn thành công!&quot;);&#10;            clearFields();&#10;            loadHoaDonTable();&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;);&#10;        } catch (DateTimeParseException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Ngày lập không hợp lệ! Định dạng: dd/MM/yyyy&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void deleteHoaDon() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để xóa!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            int confirm = JOptionPane.showConfirmDialog(this,&#10;                    &quot;Bạn có chắc muốn xóa hóa đơn này?\nToàn bộ chi tiết hóa đơn cũng sẽ bị xóa!&quot;,&#10;                    &quot;Xác nhận xóa&quot;,&#10;                    JOptionPane.YES_NO_OPTION,&#10;                    JOptionPane.QUESTION_MESSAGE);&#10;&#10;            if (confirm == JOptionPane.YES_OPTION) {&#10;                hoaDonController.deleteHoaDon(id);&#10;                JOptionPane.showMessageDialog(this, &quot;Xóa hóa đơn thành công!&quot;);&#10;                clearFields();&#10;                loadHoaDonTable();&#10;            }&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;M�� hóa đơn không hợp lệ!&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void viewHoaDonDetails() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để xem chi tiết!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            // Load with details to avoid lazy initialization issues in the dialog&#10;            HoaDon hoaDon = hoaDonController.getHoaDonByIdWithDetails(id);&#10;&#10;            if (hoaDon == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;);&#10;                return;&#10;            }&#10;&#10;            // Open detail dialog&#10;            ChiTietHoaDonDialog dialog = new ChiTietHoaDonDialog(this, hoaDon);&#10;            dialog.setVisible(true);&#10;&#10;            // Refresh table after dialog closes&#10;            loadHoaDonTable();&#10;            fillFieldsFromTable();&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void addProductToHoaDon() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để thêm sản phẩm!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            HoaDon hoaDon = hoaDonController.getHoaDonById(id);&#10;&#10;            if (hoaDon == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;);&#10;                return;&#10;            }&#10;&#10;            // Open product selection dialog&#10;            ThemSanPhamDialog dialog = new ThemSanPhamDialog(this, hoaDon);&#10;            dialog.setVisible(true);&#10;&#10;            // Refresh table after dialog closes&#10;            loadHoaDonTable();&#10;            fillFieldsFromTable();&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void clearFields() {&#10;        txtMaHD.setText(&quot;&quot;);&#10;        txtNgayLap.setText(LocalDate.now().format(dateFormatter));&#10;        txtTongTien.setText(&quot;&quot;);&#10;        selectedCustomer = null;&#10;        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;&#10;        try {&#10;            TaiKhoan currentUser = SessionManager.getInstance().getCurrentUser();&#10;            if (currentUser != null &amp;&amp; currentUser.getMaNV() != null) {&#10;                selectedEmployee = currentUser.getMaNV();&#10;                txtSelectedEmployee.setText(selectedEmployee.getHoTen() + &quot; - &quot; + selectedEmployee.getChucVu());&#10;            } else {&#10;                selectedEmployee = null;&#10;                txtSelectedEmployee.setText(&quot;&quot;);&#10;            }&#10;        } catch (Exception ex) {&#10;            selectedEmployee = null;&#10;            txtSelectedEmployee.setText(&quot;&quot;);&#10;        }&#10;        radioKhachLe.setSelected(true);&#10;&#10;        tableHoaDon.clearSelection();&#10;    }&#10;&#10;    private void fillFieldsFromTable() {&#10;        int row = tableHoaDon.getSelectedRow();&#10;        if (row &gt;= 0) {&#10;            try {&#10;                int id = (Integer) tableModelHoaDon.getValueAt(row, 0);&#10;                // Use detailed fetch for binding and later actions&#10;                HoaDon hd = hoaDonController.getHoaDonByIdWithDetails(id);&#10;&#10;                if (hd != null) {&#10;                    txtMaHD.setText(String.valueOf(hd.getId()));&#10;                    txtNgayLap.setText(hd.getNgayLap().format(dateFormatter));&#10;                    txtTongTien.setText(String.format(&quot;%,.0f VNĐ&quot;, hd.getTongTien()));&#10;&#10;                    selectedCustomer = hd.getMaKH();&#10;                    if (selectedCustomer != null) {&#10;                        txtSelectedCustomer.setText(selectedCustomer.getHoTen());&#10;                        // Customer exists - set to &quot;Hội viên&quot;&#10;                        radioHoiVien.setSelected(true);&#10;                        btnSelectCustomer.setVisible(true);&#10;&#10;                    } else {&#10;                        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;                        // No customer - set to &quot;Khách lẻ&quot;&#10;                        radioKhachLe.setSelected(true);&#10;                        btnSelectCustomer.setVisible(false);&#10;                    }&#10;                    cboHinhThucThanhToan.setSelectedIndex(hd.getMaHTTT());&#10;                    cboTrangThaiThanhToan.setSelectedIndex(0);&#10;                    selectedEmployee = hd.getMaNV();&#10;                    if (selectedEmployee != null) {&#10;                        txtSelectedEmployee.setText(selectedEmployee.getHoTen() + &quot; - &quot; + selectedEmployee.getChucVu());&#10;                    } else {&#10;                        txtSelectedEmployee.setText(&quot;&quot;);&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi khi tải thông tin hóa đơn: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private LocalDate parseDate(String dateStr) throws DateTimeParseException {&#10;        return LocalDate.parse(dateStr, dateFormatter);&#10;    }&#10;&#10;    private void printInvoiceToPDF() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để in!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            int hoaDonId = Integer.parseInt(txtMaHD.getText().trim());&#10;            HoaDon hoaDon = hoaDonController.getHoaDonById(hoaDonId);&#10;&#10;            if (hoaDon == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;, &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Open file chooser for save location&#10;            JFileChooser fileChooser = new JFileChooser();&#10;            fileChooser.setDialogTitle(&quot;Chọn nơi lưu file PDF&quot;);&#10;            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(&quot;PDF Files&quot;, &quot;pdf&quot;));&#10;            fileChooser.setSelectedFile(new File(&quot;HoaDon_&quot; + hoaDonId + &quot;.pdf&quot;));&#10;&#10;            int userSelection = fileChooser.showSaveDialog(this);&#10;            &#10;            if (userSelection == JFileChooser.APPROVE_OPTION) {&#10;                File fileToSave = fileChooser.getSelectedFile();&#10;                String filePath = fileToSave.getAbsolutePath();&#10;                &#10;                // Ensure file has .pdf extension&#10;                if (!filePath.toLowerCase().endsWith(&quot;.pdf&quot;)) {&#10;                    filePath += &quot;.pdf&quot;;&#10;                }&#10;                &#10;                // Generate PDF&#10;                PDFInvoiceGenerator.generateInvoicePDF(hoaDon, filePath);&#10;&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Đã in hóa đơn thành công!\nFile được lưu tại: &quot; + filePath, &#10;                    &quot;Thành công&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Ask if user wants to open the PDF&#10;                int openFile = JOptionPane.showConfirmDialog(this,&#10;                    &quot;Bạn có muốn mở file PDF vừa tạo không?&quot;,&#10;                    &quot;Mở file&quot;,&#10;                    JOptionPane.YES_NO_OPTION);&#10;                &#10;                if (openFile == JOptionPane.YES_OPTION) {&#10;                    try {&#10;                        if (Desktop.isDesktopSupported()) {&#10;                            Desktop.getDesktop().open(new File(filePath));&#10;                        }&#10;                    } catch (Exception ex) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Không thể mở file PDF. Vui lòng mở thủ công tại: &quot; + filePath, &#10;                            &quot;Thông báo&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                    }&#10;                }&#10;            }&#10;            &#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;, &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi khi tạo PDF: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(() -&gt; new HoaDonUI().setVisible(true));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package view;&#10;&#10;import controller.BienTheSanPhamController;&#10;import controller.ChiTietHoaDonController;&#10;import controller.HoaDonController;&#10;import controller.KhachHangController;&#10;import controller.NhanVienController;&#10;import controller.HinhThucThanhToanController;&#10;import model.*;&#10;import util.SessionManager;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.awt.event.ActionEvent;&#10;import java.awt.event.ActionListener;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.List;&#10;import java.io.File;&#10;import util.PDFInvoiceGenerator;&#10;&#10;public class HoaDonUI extends JFrame {&#10;    private JTextField txtMaHD, txtNgayLap, txtTongTien, txtSelectedEmployee, txtSelectedCustomer, txtCustomerName;&#10;    private JButton btnSelectEmployee, btnSelectCustomer;&#10;    private JRadioButton radioKhachLe, radioHoiVien;&#10;    private ButtonGroup customerTypeGroup;&#10;    private JComboBox&lt;HinhThucThanhToan&gt; cboHinhThucThanhToan;&#10;    private JComboBox&lt;String&gt; cboTrangThaiThanhToan;&#10;    private JButton btnAdd, btnUpdate, btnDelete, btnRefresh, btnViewDetails, btnAddDetail, btnPrintPDF;&#10;    private JTable tableHoaDon;&#10;    private DefaultTableModel tableModelHoaDon;&#10;    private NhanVien selectedEmployee = null;&#10;    private KhachHang selectedCustomer = null;&#10;&#10;    private HoaDonController hoaDonController;&#10;    private KhachHangController khachHangController;&#10;    private NhanVienController nhanVienController;&#10;    private ChiTietHoaDonController chiTietController;&#10;    private BienTheSanPhamController bienTheController;&#10;    private HinhThucThanhToanController hinhThucThanhToanController;&#10;&#10;    private final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;&#10;    public HoaDonUI() {&#10;        initControllers();&#10;        setTitle(&quot;Quản Lý Hóa Đơn&quot;);&#10;        setSize(900, 600);&#10;        setLocationRelativeTo(null);&#10;        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);&#10;        initComponents();&#10;        loadData();&#10;    }&#10;&#10;    private void initControllers() {&#10;        hoaDonController = new HoaDonController();&#10;        khachHangController = new KhachHangController();&#10;        nhanVienController = new NhanVienController();&#10;        chiTietController = new ChiTietHoaDonController();&#10;        bienTheController = new BienTheSanPhamController();&#10;        hinhThucThanhToanController = new HinhThucThanhToanController();&#10;    }&#10;&#10;    private void initComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;&#10;        JPanel topPanel = createInputPanel();&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        JPanel centerPanel = createTablePanel();&#10;        add(centerPanel, BorderLayout.CENTER);&#10;&#10;        JPanel bottomPanel = createButtonPanel();&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        setupEventHandlers();&#10;    }&#10;&#10;    private JPanel createInputPanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Thông tin hóa đơn&quot;));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        // Row 1&#10;        gbc.gridx = 0; gbc.gridy = 0; gbc.anchor = GridBagConstraints.WEST;&#10;        panel.add(new JLabel(&quot;Mã HĐ:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtMaHD = new JTextField(10);&#10;        txtMaHD.setEditable(false);&#10;        panel.add(txtMaHD, gbc);&#10;&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Ngày lập:&quot;), gbc);&#10;        gbc.gridx = 3; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtNgayLap = new JTextField(10);&#10;        txtNgayLap.setText(LocalDate.now().format(dateFormatter));&#10;        panel.add(txtNgayLap, gbc);&#10;&#10;        // Row 2 - Customer selection&#10;        gbc.gridx = 0; gbc.gridy = 1; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Khách hàng:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtSelectedCustomer = new JTextField();&#10;        txtSelectedCustomer.setEditable(false);&#10;        txtSelectedCustomer.setPreferredSize(new Dimension(150, 25));&#10;        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;        panel.add(txtSelectedCustomer, gbc);&#10;&#10;        // Radio buttons for customer type&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        radioKhachLe = new JRadioButton(&quot;Khách lẻ&quot;);&#10;        radioKhachLe.setSelected(true);&#10;        panel.add(radioKhachLe, gbc);&#10;&#10;        gbc.gridx = 3;&#10;        radioHoiVien = new JRadioButton(&quot;Hội viên&quot;);&#10;        panel.add(radioHoiVien, gbc);&#10;&#10;        // Customer selection button - moved after radio buttons&#10;        gbc.gridx = 4; gbc.fill = GridBagConstraints.NONE;&#10;        btnSelectCustomer = new JButton(&quot;Chọn KH&quot;);&#10;        btnSelectCustomer.setPreferredSize(new Dimension(90, 25));&#10;        panel.add(btnSelectCustomer, gbc);&#10;        btnSelectCustomer.setVisible(false);&#10;&#10;        // Row 3 - Employee selection&#10;        gbc.gridx = 0; gbc.gridy = 2; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Nhân viên:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtSelectedEmployee = new JTextField();&#10;        txtSelectedEmployee.setEditable(false);&#10;        txtSelectedEmployee.setPreferredSize(new Dimension(150, 25));&#10;        panel.add(txtSelectedEmployee, gbc);&#10;&#10;        customerTypeGroup = new ButtonGroup();&#10;        customerTypeGroup.add(radioKhachLe);&#10;        customerTypeGroup.add(radioHoiVien);&#10;&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        btnSelectEmployee = new JButton(&quot;Chọn NV&quot;);&#10;        btnSelectEmployee.setPreferredSize(new Dimension(90, 25));&#10;        panel.add(btnSelectEmployee, gbc);&#10;&#10;        gbc.gridx = 3; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Tổng tiền:&quot;), gbc);&#10;        gbc.gridx = 4; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        txtTongTien = new JTextField(10);&#10;        txtTongTien.setEditable(false);&#10;        txtTongTien.setBackground(Color.LIGHT_GRAY);&#10;        panel.add(txtTongTien, gbc);&#10;&#10;        // Row 4 - Payment method and status&#10;        gbc.gridx = 0; gbc.gridy = 3; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Hình thức TT:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        cboHinhThucThanhToan = new JComboBox&lt;&gt;();&#10;        cboHinhThucThanhToan.setPreferredSize(new Dimension(150, 25));&#10;        cboHinhThucThanhToan.setRenderer(new DefaultListCellRenderer() {&#10;            @Override&#10;            public Component getListCellRendererComponent(JList&lt;?&gt; list, Object value, int index, boolean isSelected, boolean cellHasFocus) {&#10;                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);&#10;                if (value instanceof HinhThucThanhToan) {&#10;                    HinhThucThanhToan httt = (HinhThucThanhToan) value;&#10;                    setText(httt.getTenHTTT());&#10;                } else if (value == null) {&#10;                    setText(&quot;-- Chọn hình thức thanh toán --&quot;);&#10;                }&#10;                return this;&#10;            }&#10;        });&#10;        panel.add(cboHinhThucThanhToan, gbc);&#10;&#10;        gbc.gridx = 2; gbc.fill = GridBagConstraints.NONE;&#10;        panel.add(new JLabel(&quot;Trạng thái TT:&quot;), gbc);&#10;        gbc.gridx = 3; gbc.fill = GridBagConstraints.HORIZONTAL;&#10;        cboTrangThaiThanhToan = new JComboBox&lt;&gt;();&#10;        cboTrangThaiThanhToan.setPreferredSize(new Dimension(150, 25));&#10;        panel.add(cboTrangThaiThanhToan, gbc);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private JPanel createTablePanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Danh sách hóa đơn&quot;));&#10;&#10;        tableModelHoaDon = new DefaultTableModel(&#10;                new Object[]{&quot;Mã HĐ&quot;, &quot;Ngày lập&quot;, &quot;Khách hàng&quot;, &quot;Nhân viên&quot;, &quot;Tổng tiền&quot;, &quot;Số items&quot;}, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false;&#10;            }&#10;        };&#10;&#10;        tableHoaDon = new JTable(tableModelHoaDon);&#10;        tableHoaDon.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        tableHoaDon.getTableHeader().setReorderingAllowed(false);&#10;&#10;        // Set column widths&#10;        tableHoaDon.getColumnModel().getColumn(0).setPreferredWidth(60);&#10;        tableHoaDon.getColumnModel().getColumn(1).setPreferredWidth(100);&#10;        tableHoaDon.getColumnModel().getColumn(2).setPreferredWidth(150);&#10;        tableHoaDon.getColumnModel().getColumn(3).setPreferredWidth(150);&#10;        tableHoaDon.getColumnModel().getColumn(4).setPreferredWidth(120);&#10;        tableHoaDon.getColumnModel().getColumn(5).setPreferredWidth(80);&#10;&#10;        JScrollPane scrollPane = new JScrollPane(tableHoaDon);&#10;        panel.add(scrollPane, BorderLayout.CENTER);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private JPanel createButtonPanel() {&#10;        JPanel panel = new JPanel(new FlowLayout());&#10;&#10;        btnAdd = new JButton(&quot;Thêm mới&quot;);&#10;        btnAdd.setPreferredSize(new Dimension(110, 30));&#10;        btnUpdate = new JButton(&quot;Cập nhật&quot;);&#10;        btnUpdate.setPreferredSize(new Dimension(100, 30));&#10;        btnDelete = new JButton(&quot;Xóa&quot;);&#10;        btnDelete.setPreferredSize(new Dimension(80, 30));&#10;        btnViewDetails = new JButton(&quot;Xem chi tiết&quot;);&#10;        btnViewDetails.setPreferredSize(new Dimension(120, 30));&#10;        btnAddDetail = new JButton(&quot;Thêm sản phẩm&quot;);&#10;        btnAddDetail.setPreferredSize(new Dimension(140, 30));&#10;        btnRefresh = new JButton(&quot;Làm mới&quot;);&#10;        btnRefresh.setPreferredSize(new Dimension(100, 30));&#10;        btnPrintPDF = new JButton(&quot;In PDF&quot;);&#10;        btnPrintPDF.setPreferredSize(new Dimension(100, 30));&#10;&#10;        panel.add(btnAdd);&#10;        panel.add(btnUpdate);&#10;        panel.add(btnDelete);&#10;        panel.add(Box.createHorizontalStrut(10));&#10;        panel.add(btnViewDetails);&#10;        panel.add(btnAddDetail);&#10;        panel.add(Box.createHorizontalStrut(10));&#10;        panel.add(btnRefresh);&#10;        panel.add(btnPrintPDF);&#10;&#10;        return panel;&#10;    }&#10;&#10;    private void setupEventHandlers() {&#10;        btnAdd.addActionListener(e -&gt; addHoaDon());&#10;        btnUpdate.addActionListener(e -&gt; updateHoaDon());&#10;        btnDelete.addActionListener(e -&gt; deleteHoaDon());&#10;        btnViewDetails.addActionListener(e -&gt; viewHoaDonDetails());&#10;        btnAddDetail.addActionListener(e -&gt; addProductToHoaDon());&#10;        btnRefresh.addActionListener(e -&gt; {&#10;            clearFields();&#10;            loadData();&#10;        });&#10;        btnPrintPDF.addActionListener(e -&gt; printInvoiceToPDF());&#10;        btnSelectEmployee.addActionListener(e -&gt; selectEmployeeDialog());&#10;        btnSelectCustomer.addActionListener(e -&gt; selectCustomerDialog());&#10;&#10;        // Add radio button event handlers&#10;        radioKhachLe.addActionListener(e -&gt; {&#10;            if (radioKhachLe.isSelected()) {&#10;                selectedCustomer = null;&#10;                txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;                btnSelectCustomer.setVisible(false);&#10;            }&#10;        });&#10;&#10;        radioHoiVien.addActionListener(e -&gt; {&#10;            if (radioHoiVien.isSelected()) {&#10;                btnSelectCustomer.setVisible(true);&#10;                if (selectedCustomer == null) {&#10;                    txtSelectedCustomer.setText(&quot;&quot;);&#10;                }&#10;            }&#10;        });&#10;&#10;        tableHoaDon.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting()) {&#10;                fillFieldsFromTable();&#10;            }&#10;        });&#10;&#10;    }&#10;&#10;    private void loadData() {&#10;        loadHoaDonTable();&#10;        loadComboBoxes();&#10;    }&#10;&#10;    private void loadHoaDonTable() {&#10;        tableModelHoaDon.setRowCount(0);&#10;        try {&#10;            // Use eager fetch to avoid lazy initialization when rendering table&#10;            List&lt;HoaDon&gt; list = hoaDonController.getAllHoaDonWithDetails();&#10;            for (HoaDon hd : list) {&#10;                Object[] row = {&#10;                        hd.getId(),&#10;                        hd.getNgayLap().format(dateFormatter),&#10;                        hd.getMaKH() != null ? hd.getMaKH().getHoTen() : &quot;Khách lẻ&quot;,&#10;                        hd.getMaNV() != null ? hd.getMaNV().getHoTen() : &quot;N/A&quot;,&#10;                        String.format(&quot;%,.0f VNĐ&quot;, hd.getTongTien()),&#10;                        hd.getTotalItems()&#10;                };&#10;                tableModelHoaDon.addRow(row);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi khi tải dữ liệu: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void loadComboBoxes() {&#10;        try {&#10;            // Set current user as default employee&#10;            try {&#10;                TaiKhoan currentUser = SessionManager.getInstance().getCurrentUser();&#10;                if (currentUser != null &amp;&amp; currentUser.getMaNV() != null) {&#10;                    selectedEmployee = currentUser.getMaNV();&#10;                    txtSelectedEmployee.setText(selectedEmployee.getHoTen() + &quot; - &quot; + selectedEmployee.getChucVu());&#10;                }&#10;            } catch (Exception ex) {&#10;                // If there's an issue with current user, just continue without setting default&#10;            }&#10;&#10;            // Load payment methods&#10;            DefaultComboBoxModel&lt;HinhThucThanhToan&gt; paymentMethodModel = new DefaultComboBoxModel&lt;&gt;();&#10;            cboHinhThucThanhToan.setModel(paymentMethodModel);&#10;            paymentMethodModel.addElement(null); // Add empty option&#10;            &#10;            List&lt;HinhThucThanhToan&gt; paymentMethods = hinhThucThanhToanController.getActiveHinhThucThanhToan();&#10;            for (HinhThucThanhToan method : paymentMethods) {&#10;                paymentMethodModel.addElement(method);&#10;            }&#10;            cboHinhThucThanhToan.setSelectedIndex(0); // Select empty option&#10;&#10;            // Load payment statuses&#10;            DefaultComboBoxModel&lt;String&gt; paymentStatusModel = new DefaultComboBoxModel&lt;&gt;();&#10;            cboTrangThaiThanhToan.setModel(paymentStatusModel);&#10;            paymentStatusModel.addElement(null);&#10;            paymentStatusModel.addElement(&quot;PENDING&quot;);&#10;            paymentStatusModel.addElement(&quot;COMPLETED&quot;);&#10;            paymentStatusModel.addElement(&quot;FAILED&quot;);&#10;            cboTrangThaiThanhToan.setSelectedIndex(0); // Default to &quot;Chưa thanh toán&quot;&#10;&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi khi tải combo box: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void selectEmployeeDialog() {&#10;        NhanVien employee = EmployeeSelectionDialog.showDialog(this);&#10;        if (employee != null) {&#10;            selectedEmployee = employee;&#10;&#10;        }&#10;    }&#10;&#10;    private void selectCustomerDialog() {&#10;        KhachHang customer = CustomerSelectionDialog.showDialog(this);&#10;        if (customer != null) {&#10;            selectedCustomer = customer;&#10;            txtSelectedCustomer.setText(customer.getHoTen());&#10;        }&#10;    }&#10;&#10;    private void setGuestCustomer() {&#10;        selectedCustomer = null;&#10;        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;    }&#10;    private void addHoaDon() {&#10;        try {&#10;            LocalDate ngayLap = parseDate(txtNgayLap.getText().trim());&#10;&#10;            if (selectedEmployee == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn nhân viên!&quot;);&#10;                return;&#10;            }&#10;&#10;            HoaDon hd = new HoaDon(ngayLap, selectedCustomer, selectedEmployee);&#10;            hoaDonController.addHoaDon(hd);&#10;&#10;            JOptionPane.showMessageDialog(this, &quot;Thêm hóa đơn thành công!&quot;);&#10;            loadHoaDonTable();&#10;&#10;        } catch (DateTimeParseException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Ngày lập không hợp lệ! Định dạng: dd/MM/yyyy&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void updateHoaDon() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để cập nhật!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            HoaDon hd = hoaDonController.getHoaDonById(id);&#10;&#10;            if (hd == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;);&#10;                return;&#10;            }&#10;&#10;            // Set payment method and status&#10;            HinhThucThanhToan selectedPaymentMethod = (HinhThucThanhToan) cboHinhThucThanhToan.getSelectedItem();&#10;            if (selectedPaymentMethod != null) {&#10;                hd.setMaHTTT(selectedPaymentMethod.getMaHTTT());&#10;            }&#10;&#10;            String selectedPaymentStatus = (String) cboTrangThaiThanhToan.getSelectedItem();&#10;            if (selectedPaymentStatus != null) {&#10;                hd.setTrangThaiThanhToan(selectedPaymentStatus);&#10;            }&#10;&#10;&#10;            LocalDate ngayLap = parseDate(txtNgayLap.getText().trim());&#10;&#10;            if (selectedEmployee == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn nhân viên!&quot;);&#10;                return;&#10;            }&#10;&#10;            hd.setNgayLap(ngayLap);&#10;            hd.setMaKH(selectedCustomer);&#10;            hd.setMaNV(selectedEmployee);&#10;&#10;            hoaDonController.updateHoaDon(hd);&#10;&#10;            JOptionPane.showMessageDialog(this, &quot;Cập nhật hóa đơn thành công!&quot;);&#10;            clearFields();&#10;            loadHoaDonTable();&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;);&#10;        } catch (DateTimeParseException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Ngày lập không hợp lệ! Định dạng: dd/MM/yyyy&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void deleteHoaDon() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để xóa!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            int confirm = JOptionPane.showConfirmDialog(this,&#10;                    &quot;Bạn có chắc muốn xóa hóa đơn này?\nToàn bộ chi tiết hóa đơn cũng sẽ bị xóa!&quot;,&#10;                    &quot;Xác nhận xóa&quot;,&#10;                    JOptionPane.YES_NO_OPTION,&#10;                    JOptionPane.QUESTION_MESSAGE);&#10;&#10;            if (confirm == JOptionPane.YES_OPTION) {&#10;                hoaDonController.deleteHoaDon(id);&#10;                JOptionPane.showMessageDialog(this, &quot;Xóa hóa đơn thành công!&quot;);&#10;                clearFields();&#10;                loadHoaDonTable();&#10;            }&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;M�� hóa đơn không hợp lệ!&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void viewHoaDonDetails() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để xem chi tiết!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            // Load with details to avoid lazy initialization issues in the dialog&#10;            HoaDon hoaDon = hoaDonController.getHoaDonByIdWithDetails(id);&#10;&#10;            if (hoaDon == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;);&#10;                return;&#10;            }&#10;&#10;            // Open detail dialog&#10;            ChiTietHoaDonDialog dialog = new ChiTietHoaDonDialog(this, hoaDon);&#10;            dialog.setVisible(true);&#10;&#10;            // Refresh table after dialog closes&#10;            loadHoaDonTable();&#10;            fillFieldsFromTable();&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void addProductToHoaDon() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để thêm sản phẩm!&quot;);&#10;                return;&#10;            }&#10;&#10;            int id = Integer.parseInt(txtMaHD.getText().trim());&#10;            HoaDon hoaDon = hoaDonController.getHoaDonById(id);&#10;&#10;            if (hoaDon == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;);&#10;                return;&#10;            }&#10;&#10;            // Open product selection dialog&#10;            ThemSanPhamDialog dialog = new ThemSanPhamDialog(this, hoaDon);&#10;            dialog.setVisible(true);&#10;&#10;            // Refresh table after dialog closes&#10;            loadHoaDonTable();&#10;            fillFieldsFromTable();&#10;&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void clearFields() {&#10;        txtMaHD.setText(&quot;&quot;);&#10;        txtNgayLap.setText(LocalDate.now().format(dateFormatter));&#10;        txtTongTien.setText(&quot;&quot;);&#10;        selectedCustomer = null;&#10;        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;&#10;        try {&#10;            TaiKhoan currentUser = SessionManager.getInstance().getCurrentUser();&#10;            if (currentUser != null &amp;&amp; currentUser.getMaNV() != null) {&#10;                selectedEmployee = currentUser.getMaNV();&#10;                txtSelectedEmployee.setText(selectedEmployee.getHoTen() + &quot; - &quot; + selectedEmployee.getChucVu());&#10;            } else {&#10;                selectedEmployee = null;&#10;                txtSelectedEmployee.setText(&quot;&quot;);&#10;            }&#10;        } catch (Exception ex) {&#10;            selectedEmployee = null;&#10;            txtSelectedEmployee.setText(&quot;&quot;);&#10;        }&#10;        radioKhachLe.setSelected(true);&#10;&#10;        tableHoaDon.clearSelection();&#10;    }&#10;&#10;    private void fillFieldsFromTable() {&#10;        int row = tableHoaDon.getSelectedRow();&#10;        if (row &gt;= 0) {&#10;            try {&#10;                int id = (Integer) tableModelHoaDon.getValueAt(row, 0);&#10;                // Use detailed fetch for binding and later actions&#10;                HoaDon hd = hoaDonController.getHoaDonByIdWithDetails(id);&#10;&#10;                if (hd != null) {&#10;                    txtMaHD.setText(String.valueOf(hd.getId()));&#10;                    txtNgayLap.setText(hd.getNgayLap().format(dateFormatter));&#10;                    txtTongTien.setText(String.format(&quot;%,.0f VNĐ&quot;, hd.getTongTien()));&#10;&#10;                    selectedCustomer = hd.getMaKH();&#10;                    if (selectedCustomer != null) {&#10;                        txtSelectedCustomer.setText(selectedCustomer.getHoTen());&#10;                        // Customer exists - set to &quot;Hội viên&quot;&#10;                        radioHoiVien.setSelected(true);&#10;                        btnSelectCustomer.setVisible(true);&#10;&#10;                    } else {&#10;                        txtSelectedCustomer.setText(&quot;Khách lẻ&quot;);&#10;                        // No customer - set to &quot;Khách lẻ&quot;&#10;                        radioKhachLe.setSelected(true);&#10;                        btnSelectCustomer.setVisible(false);&#10;                    }&#10;                    cboHinhThucThanhToan.setSelectedIndex(hd.getMaHTTT());&#10;                    cboTrangThaiThanhToan.setSelectedIndex(0);&#10;                    selectedEmployee = hd.getMaNV();&#10;                    if (selectedEmployee != null) {&#10;                        txtSelectedEmployee.setText(selectedEmployee.getHoTen() + &quot; - &quot; + selectedEmployee.getChucVu());&#10;                    } else {&#10;                        txtSelectedEmployee.setText(&quot;&quot;);&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &quot;Lỗi khi tải thông tin hóa đơn: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private LocalDate parseDate(String dateStr) throws DateTimeParseException {&#10;        return LocalDate.parse(dateStr, dateFormatter);&#10;    }&#10;&#10;    private void printInvoiceToPDF() {&#10;        try {&#10;            if (txtMaHD.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Vui lòng chọn hóa đơn để in!&quot;, &quot;Cảnh báo&quot;, JOptionPane.WARNING_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            int hoaDonId = Integer.parseInt(txtMaHD.getText().trim());&#10;            // Use the method that loads all details to avoid lazy initialization errors&#10;            HoaDon hoaDon = hoaDonController.getHoaDonByIdWithDetails(hoaDonId);&#10;&#10;            if (hoaDon == null) {&#10;                JOptionPane.showMessageDialog(this, &quot;Không tìm thấy hóa đơn!&quot;, &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;                return;&#10;            }&#10;&#10;            // Open file chooser for save location&#10;            JFileChooser fileChooser = new JFileChooser();&#10;            fileChooser.setDialogTitle(&quot;Chọn nơi lưu file PDF&quot;);&#10;            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(&quot;PDF Files&quot;, &quot;pdf&quot;));&#10;            fileChooser.setSelectedFile(new File(&quot;HoaDon_&quot; + hoaDonId + &quot;.pdf&quot;));&#10;&#10;            int userSelection = fileChooser.showSaveDialog(this);&#10;            &#10;            if (userSelection == JFileChooser.APPROVE_OPTION) {&#10;                File fileToSave = fileChooser.getSelectedFile();&#10;                String filePath = fileToSave.getAbsolutePath();&#10;                &#10;                // Ensure file has .pdf extension&#10;                if (!filePath.toLowerCase().endsWith(&quot;.pdf&quot;)) {&#10;                    filePath += &quot;.pdf&quot;;&#10;                }&#10;                &#10;                // Generate PDF&#10;                PDFInvoiceGenerator.generateInvoicePDF(hoaDon, filePath);&#10;&#10;                JOptionPane.showMessageDialog(this,&#10;                    &quot;Đã in hóa đơn thành công!\nFile được lưu tại: &quot; + filePath, &#10;                    &quot;Thành công&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                &#10;                // Ask if user wants to open the PDF&#10;                int openFile = JOptionPane.showConfirmDialog(this,&#10;                    &quot;Bạn có muốn mở file PDF vừa tạo không?&quot;,&#10;                    &quot;Mở file&quot;,&#10;                    JOptionPane.YES_NO_OPTION);&#10;                &#10;                if (openFile == JOptionPane.YES_OPTION) {&#10;                    try {&#10;                        if (Desktop.isDesktopSupported()) {&#10;                            Desktop.getDesktop().open(new File(filePath));&#10;                        }&#10;                    } catch (Exception ex) {&#10;                        JOptionPane.showMessageDialog(this, &#10;                            &quot;Không thể mở file PDF. Vui lòng mở thủ công tại: &quot; + filePath, &#10;                            &quot;Thông báo&quot;, &#10;                            JOptionPane.INFORMATION_MESSAGE);&#10;                    }&#10;                }&#10;            }&#10;            &#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Mã hóa đơn không hợp lệ!&quot;, &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;        } catch (Exception ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Lỗi khi tạo PDF: &quot; + ex.getMessage(), &quot;Lỗi&quot;, JOptionPane.ERROR_MESSAGE);&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(() -&gt; new HoaDonUI().setVisible(true));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>