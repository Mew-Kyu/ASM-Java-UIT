<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="#  Quản Lý Cửa Hàng Quần Áo (Clothing Store Management System)&#10;&#10;[![Java](https://img.shields.io/badge/Java-21-orange.svg)](https://www.oracle.com/java/)&#10;[![JPA](https://img.shields.io/badge/JPA-3.2.0-blue.svg)](https://jakarta.ee/specifications/persistence/)&#10;[![Hibernate](https://img.shields.io/badge/Hibernate-7.0.8-green.svg)](https://hibernate.org/)&#10;[![Maven](https://img.shields.io/badge/Maven-3.8+-red.svg)](https://maven.apache.org/)&#10;[![SQL Server](https://img.shields.io/badge/SQL%20Server-2019+-blue.svg)](https://www.microsoft.com/en-us/sql-server/)&#10;[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)&#10;&#10;##  Table of Contents&#10;&#10;- [Overview](#overview)&#10;- [️ Architecture](#architecture)&#10;- [ Design Patterns](#design-patterns)&#10;- [✨ Core Features](#core-features)&#10;- [ Advanced Features](#advanced-features)&#10;- [ Project Structure](#project-structure)&#10;- [⚙️ Setup &amp; Installation](#setup--installation)&#10;- [ Configuration](#configuration)&#10;- [ Database Schema](#database-schema)&#10;- [ User Interface](#user-interface)&#10;- [ Security &amp; Authentication](#security--authentication)&#10;- [ Usage Guide](#usage-guide)&#10;- [ Testing](#testing)&#10;- [ Deployment](#deployment)&#10;- [ Contributing](#contributing)&#10;- [ License](#license)&#10;- [ Troubleshooting](#troubleshooting)&#10;&#10;## Overview&#10;&#10;**Quản Lý Cửa Hàng Quần Áo** is a comprehensive, enterprise-grade clothing store management system built with modern Java technologies and clean architecture principles. This application provides end-to-end solutions for retail clothing businesses, from inventory management to customer loyalty programs.&#10;&#10;###  **Key Highlights**&#10;- **Clean Architecture** implementation with clear separation of concerns&#10;- **Role-Based Access Control (RBAC)** with 3-tier permission system&#10;- **Advanced Features**: Returns/Exchanges, Loyalty Cards, Supplier Management, Reporting&#10;- **Modern Tech Stack**: Java 21, JPA 3.2, Hibernate 7.0, SQL Server&#10;- **Professional Design Patterns**: 8 Gang of Four patterns implemented&#10;- **Enterprise Security**: BCrypt password hashing, session management&#10;- **PDF Generation**: Automated invoice and receipt generation&#10;- **Vietnamese Language Support**: Full localization for Vietnamese market&#10;&#10;## ️ Architecture&#10;&#10;### **Clean Architecture Implementation**&#10;&#10;The application follows **Clean Architecture** principles with clear separation of concerns across multiple layers:&#10;&#10;```&#10;┌─────────────────────────────────────────────────────────┐&#10;│                    Presentation Layer                   │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │   Swing UI      │───▶│      Controllers            │ │&#10;│  │   Components    │    │   (UI-Service Bridge)       │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                  Business Logic Layer                   │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │    Services     │───▶│       Validators            │ │&#10;│  │ (Business Logic)│    │   (Business Rules)          │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                  Data Access Layer                      │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │  DAO Interfaces │───▶│    DAO Implementations      │ │&#10;│  │   (Contracts)   │    │     (Data Access)           │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                    Infrastructure Layer                 │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │  DI Container   │    │   EntityManager Utility     │ │&#10;│  │   Exception     │    │     Database Config         │ │&#10;│  │   Framework     │    │     Session Management      │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                      Domain Layer                       │&#10;│  ┌─────────────────────────────────────────────────────┐ │&#10;│  │              JPA Entities (Domain Models)           │ │&#10;│  │   SanPham │ TaiKhoan │ NhanVien │ HoaDon │ etc.    │ │&#10;│  └─────────────────────────────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;```&#10;&#10;##  Design Patterns&#10;&#10;This project implements **8 professional design patterns** following Gang of Four and enterprise patterns:&#10;&#10;### **1.  Singleton Pattern**&#10;**Implementation**: `ServiceContainer`, `EntityManagerUtil`, `SessionManager`&#10;&#10;```java&#10;public class ServiceContainer {&#10;    private static ServiceContainer instance;&#10;    &#10;    public static synchronized ServiceContainer getInstance() {&#10;        if (instance == null) {&#10;            instance = new ServiceContainer();&#10;        }&#10;        return instance;&#10;    }&#10;}&#10;```&#10;&#10;### **2.  Template Method Pattern**&#10;**Implementation**: `BaseDAO&lt;T, ID&gt;` abstract class&#10;&#10;```java&#10;public abstract class BaseDAO&lt;T, ID&gt; {&#10;    // Template method defining algorithm structure&#10;    public void insert(T entity) {&#10;        validateEntity(entity);  // Hook method&#10;        EntityManagerUtil.executeInTransaction(em -&gt; {&#10;            em.persist(entity);&#10;        });&#10;    }&#10;    &#10;    // Hook method for subclasses to override&#10;    protected void validateEntity(T entity) {&#10;        // Default validation&#10;    }&#10;}&#10;```&#10;&#10;### **3.  Strategy Pattern**&#10;**Implementation**: `Validator&lt;T&gt;` interface with multiple implementations&#10;&#10;```java&#10;public interface Validator&lt;T&gt; {&#10;    ValidationResult validate(T object);&#10;}&#10;&#10;public class SanPhamValidator implements Validator&lt;SanPham&gt; {&#10;    public ValidationResult validate(SanPham product) {&#10;        // Product-specific validation logic&#10;    }&#10;}&#10;```&#10;&#10;### **4.  Factory Pattern**&#10;**Implementation**: `ApplicationConfig` for service creation&#10;&#10;```java&#10;public class ApplicationConfig {&#10;    private static void registerServices(ServiceContainer container) {&#10;        container.registerSingletonFactory(ISanPhamService.class, () -&gt; {&#10;            ISanPhamDAO dao = container.getService(ISanPhamDAO.class);&#10;            return new SanPhamServiceImpl(dao);&#10;        });&#10;    }&#10;}&#10;```&#10;&#10;### **5.  Repository Pattern**&#10;**Implementation**: DAO layer with interfaces and implementations&#10;&#10;```java&#10;public interface ISanPhamDAO {&#10;    void insert(SanPham sp);&#10;    Optional&lt;SanPham&gt; findById(int id);&#10;    List&lt;SanPham&gt; findAll();&#10;}&#10;&#10;public class SanPhamDAO extends BaseDAO&lt;SanPham, Integer&gt; implements ISanPhamDAO {&#10;    // Repository implementation&#10;}&#10;```&#10;&#10;### **6.  Dependency Injection Pattern**&#10;**Implementation**: Custom DI container with lifecycle management&#10;&#10;```java&#10;// Registration&#10;container.registerSingleton(ISanPhamDAO.class, new SanPhamDAO());&#10;&#10;// Injection&#10;public class SanPhamController {&#10;    private final ISanPhamService service;&#10;    &#10;    public SanPhamController() {&#10;        this.service = ApplicationConfig.getService(ISanPhamService.class);&#10;    }&#10;}&#10;```&#10;&#10;### **7. ️ MVC (Model-View-Controller) Pattern**&#10;**Implementation**: Separation between UI, controllers, and models&#10;&#10;```java&#10;// Model (Domain)&#10;@Entity public class SanPham { /* JPA Entity */ }&#10;&#10;// View (Presentation)&#10;public class SanPhamUI extends JFrame { /* Swing UI */ }&#10;&#10;// Controller (Coordination)&#10;public class SanPhamController { /* UI-Service Bridge */ }&#10;```&#10;&#10;### **8.  Command Pattern**&#10;**Implementation**: Service methods as commands with validation and error handling&#10;&#10;```java&#10;public class SanPhamServiceImpl implements ISanPhamService {&#10;    public void createProduct(SanPham product) throws ValidationException, BusinessException {&#10;        // Validation Command&#10;        ValidationResult result = validator.validate(product);&#10;        if (!result.isValid()) {&#10;            throw new ValidationException(result.getErrors());&#10;        }&#10;        &#10;        // Business Logic Command&#10;        if (isProductNameExists(product.getName())) {&#10;            throw new BusinessException(&quot;Product name already exists&quot;);&#10;        }&#10;        &#10;        // Persistence Command&#10;        productDAO.insert(product);&#10;    }&#10;}&#10;```&#10;&#10;## ✅ SOLID Principles&#10;&#10;### **S - Single Responsibility Principle**&#10;✅ **Implemented**: Each class has one reason to change&#10;- **Controllers**: Only handle UI-Service communication&#10;- **Services**: Only contain business logic&#10;- **DAOs**: Only handle data access&#10;- **Validators**: Only handle validation logic&#10;&#10;### **O - Open/Closed Principle**&#10;✅ **Implemented**: Open for extension, closed for modification&#10;- `BaseDAO` can be extended without modification&#10;- New validators can be added without changing existing code&#10;- Service interfaces allow new implementations&#10;&#10;### **L - Liskov Substitution Principle**&#10;✅ **Implemented**: Derived classes are substitutable for base classes&#10;- All DAO implementations are interchangeable through interfaces&#10;- Service implementations follow their contracts exactly&#10;&#10;### **I - Interface Segregation Principle**&#10;✅ **Implemented**: Clients depend only on interfaces they use&#10;- Focused interfaces: `ISanPhamDAO`, `ITaiKhoanDAO`, etc.&#10;- No fat interfaces with unused methods&#10;&#10;### **D - Dependency Inversion Principle**&#10;✅ **Implemented**: Depend on abstractions, not concretions&#10;- High-level modules depend on interfaces&#10;- Dependencies injected through constructor&#10;- Easy to swap implementations&#10;&#10;## ✨ Core Features&#10;&#10;### ** User &amp; Employee Management**&#10;- **Multi-role authentication system** (Admin, Manager, Staff)&#10;- **Secure password hashing** with BCrypt encryption&#10;- **Session management** with automatic timeout and cleanup&#10;- **Role-based access control (RBAC)** with granular permissions&#10;- **Employee profile management** with comprehensive information tracking&#10;- **Work status monitoring** and employee performance tracking&#10;&#10;### ** Product &amp; Inventory Management**&#10;- **Complete product lifecycle management** (CRUD operations)&#10;- **Hierarchical category management** with unlimited depth&#10;- **Product variant management** (size, color, quantity, pricing)&#10;- **Advanced search and filtering** with Vietnamese language support&#10;- **Real-time inventory tracking** and stock level monitoring&#10;- **Low stock alerts** and automated reorder notifications&#10;- **Barcode support** for quick product identification&#10;&#10;### ** Sales &amp; Invoice Management**&#10;- **Comprehensive invoice creation and management**&#10;- **Multi-payment method support** (Cash, Card, Bank Transfer)&#10;- **Real-time inventory updates** during sales transactions&#10;- **Customer information management** with purchase history&#10;- **PDF invoice generation** with professional formatting&#10;- **Sales analytics** and performance tracking&#10;- **Discount and promotion application**&#10;&#10;### ** Security &amp; Authentication**&#10;- **Enterprise-grade authentication** with session management&#10;- **BCrypt password hashing** with salt for maximum security&#10;- **Role-based authorization** at UI, controller, and service levels&#10;- **Input validation and sanitization** across all layers&#10;- **SQL injection prevention** through parameterized queries&#10;- **Audit logging** for all critical operations&#10;&#10;##  Advanced Features&#10;&#10;### ** Returns &amp; Exchange System**&#10;- **Comprehensive return/exchange workflow** with approval process&#10;- **30-day return policy** with automatic validation&#10;- **Multi-step approval process** (Pending → Approved → Completed)&#10;- **Refund management** with multiple payment methods&#10;- **Return reason tracking** and analytics&#10;- **PDF return receipt generation**&#10;- **Inventory adjustment** upon return completion&#10;&#10;### ** Loyalty Card System**&#10;- **5-tier loyalty program**: Bronze, Silver, Gold, Platinum, Diamond&#10;- **Automatic point accumulation** based on purchase amount&#10;- **Tier-based benefits**: 1%-3% cashback, 0%-10% discounts&#10;- **Point redemption system** for future purchases&#10;- **Loyalty card management** with unique card numbers&#10;- **Point history tracking** and expiration management&#10;- **Customer tier upgrade** based on spending thresholds&#10;&#10;### ** Promotion &amp; Discount System**&#10;- **Multiple promotion types**: Percentage, Fixed Amount, Buy X Get Y&#10;- **Flexible promotion rules** with date ranges and conditions&#10;- **Automatic promotion application** based on cart contents&#10;- **Promotion code system** for targeted marketing&#10;- **Category and product-specific promotions**&#10;- **Customer group targeting** for personalized offers&#10;&#10;### ** Supplier &amp; Purchase Management**&#10;- **Comprehensive supplier database** with contact information&#10;- **Supplier performance tracking** with rating system&#10;- **Purchase order management** with approval workflow&#10;- **Delivery tracking** and receipt confirmation&#10;- **Supplier payment terms** and credit management&#10;- **Purchase analytics** and cost optimization&#10;&#10;### ** Advanced Reporting &amp; Analytics**&#10;- **Revenue analytics** with time-based comparisons&#10;- **Product performance reports** with sales trends&#10;- **Customer behavior analysis** and segmentation&#10;- **Inventory turnover reports** and optimization suggestions&#10;- **Employee performance tracking** and commission calculations&#10;- **Profit margin analysis** by product and category&#10;- **Export capabilities** to PDF and Excel formats&#10;&#10;### ** Payment Method Management**&#10;- **Multiple payment method support** (Cash, Credit Card, Bank Transfer, E-wallet)&#10;- **Payment method configuration** with fees and limits&#10;- **Transaction tracking** and reconciliation&#10;- **Split payment support** for large transactions&#10;- **Payment analytics** and processing fee optimization&#10;&#10;##  Project Structure&#10;&#10;```&#10;src/main/java/&#10;├──  config/&#10;│   └── ApplicationConfig.java          #  Factory pattern for DI setup&#10;├──  controller/&#10;│   ├── SanPhamController.java          #  Product management controller&#10;│   ├── TaiKhoanController.java         #  Account management controller&#10;│   ├── HoaDonController.java           #  Invoice operations controller&#10;│   ├── BienTheSanPhamController.java   #  Product variant controller&#10;│   ├── KhachHangController.java        #  Customer management controller&#10;│   ├── NhanVienController.java         #  Employee management controller&#10;│   ├── DanhMucController.java          #  Category management controller&#10;│   ├── MauSacController.java           #  Color management controller&#10;│   ├── KichThuocController.java        #  Size management controller&#10;│   └── ChiTietHoaDonController.java    #  Invoice detail controller&#10;├── ️ dao/&#10;│   ├── base/&#10;│   │   └── BaseDAO.java                #  Template Method pattern base class&#10;│   ├── interfaces/&#10;│   │   ├── ISanPhamDAO.java            #  Product data access interface&#10;│   │   ├── ITaiKhoanDAO.java           #  Account data access interface&#10;│   │   ├── IHoaDonDAO.java             #  Invoice data access interface&#10;│   │   ├── IBienTheSanPhamDAO.java     #  Product variant data access&#10;│   │   ├── IKhachHangDAO.java          #  Customer data access interface&#10;│   │   ├── INhanVienDAO.java           #  Employee data access interface&#10;│   │   ├── IDanhMucDAO.java            #  Category data access interface&#10;│   │   ├── IMauSacDAO.java             #  Color data access interface&#10;│   │   ├── IKichThuocDAO.java          #  Size data access interface&#10;│   │   ├── IChiTietHoaDonDAO.java      #  Invoice detail data access&#10;│   │   ├── IPhieuDoiTraDAO.java        #  Return/Exchange data access&#10;│   │   ├── ITheThanThietDAO.java       #  Loyalty card data access&#10;│   │   ├── INhaCungCapDAO.java         #  Supplier data access interface&#10;│   │   ├── IBaoCaoDAO.java             #  Report data access interface&#10;│   │   ├── IHinhThucThanhToanDAO.java  #  Payment method data access&#10;│   │   ├── ILichSuDiemDAO.java         #  Point history data access&#10;│   │   └── IChiTietPhieuDoiTraDAO.java #  Return detail data access&#10;│   └── impl/&#10;│       ├── SanPhamDAO.java             #  Product data implementation&#10;│       ├── TaiKhoanDAO.java            #  Account data implementation&#10;│       ├── HoaDonDAO.java              #  Invoice data implementation&#10;│       ├── BienTheSanPhamDAO.java      #  Product variant implementation&#10;│       ├── KhachHangDAO.java           #  Customer data implementation&#10;│       ├── NhanVienDAO.java            #  Employee data implementation&#10;│       ├── DanhMucDAO.java             #  Category data implementation&#10;│       ├── MauSacDAO.java              #  Color data implementation&#10;│       ├── KichThuocDAO.java           #  Size data implementation&#10;│       ├── ChiTietHoaDonDAO.java       #  Invoice detail implementation&#10;│       ├── PhieuDoiTraDAO.java         #  Return/Exchange implementation&#10;│       ├── TheThanThietDAO.java        #  Loyalty card implementation&#10;│       ├── NhaCungCapDAO.java          #  Supplier data implementation&#10;│       ├── BaoCaoDAO.java              #  Report data implementation&#10;│       ├── HinhThucThanhToanDAO.java   #  Payment method implementation&#10;│       ├── LichSuDiemDAO.java          #  Point history implementation&#10;│       └── ChiTietPhieuDoiTraDAO.java  #  Return detail implementation&#10;├──  di/&#10;│   └── ServiceContainer.java           #  Singleton DI container&#10;├── ⚠️ exception/&#10;│   ├── BusinessException.java          #  Business logic errors&#10;│   ├── DAOException.java              # ️ Data access errors&#10;│   └── ValidationException.java        # ✅ Validation errors&#10;├──  service/&#10;│   ├── interfaces/&#10;│   │   ├── ISanPhamService.java        #  Product business logic interface&#10;│   │   ├── ITaiKhoanService.java       #  Account business logic interface&#10;│   │   ├── IPhieuDoiTraService.java    #  Return/Exchange business logic&#10;│   │   └── IBaoCaoService.java         #  Report business logic interface&#10;│   └── impl/&#10;│       ├── SanPhamServiceImpl.java     #  Product service implementation&#10;│       ├── TaiKhoanServiceImpl.java    #  Account service implementation&#10;│       ├── PhieuDoiTraServiceImpl.java #  Return/Exchange implementation&#10;│       └── BaoCaoServiceImpl.java      #  Report service implementation&#10;├── ️ util/&#10;│   ├── EntityManagerUtil.java          #  JPA EntityManager management&#10;│   ├── SessionManager.java             #  User session management&#10;│   ├── RoleManager.java                #  Role-based access control&#10;│   ├── PasswordUtils.java              #  BCrypt password utilities&#10;│   ├── PDFInvoiceGenerator.java        #  Invoice PDF generation&#10;│   ├── PDFPhieuDoiTraGenerator.java    #  Return receipt PDF generation&#10;│   ├── FontDownloader.java             #  Vietnamese font support&#10;│   └── DatabaseTestUtil.java           #  Database testing utilities&#10;├── ✅ validation/&#10;│   ├── Validator.java                  #  Strategy pattern interface&#10;│   ├── ValidationResult.java           #  Validation response wrapper&#10;│   ├── SanPhamValidator.java          #  Product validation logic&#10;│   └── TaiKhoanValidator.java         #  Account validation logic&#10;├──  view/&#10;│   ├── BaseAuthenticatedUI.java        #  Base UI with authentication&#10;│   ├── LoginUI.java                    #  Login interface&#10;│   ├── MainMenuUI.java                 #  Main dashboard with role-based menu&#10;│   ├── SanPhamUI.java                  #  Product management interface&#10;│   ├── TaiKhoanUI.java                 #  Account management interface&#10;│   ├── HoaDonUI.java                   #  Invoice management interface&#10;│   ├── BienTheSanPhamUI.java           #  Product variant management&#10;│   ├── KhachHangUI.java                #  Customer management interface&#10;│   ├── NhanVienUI.java                 #  Employee management interface&#10;│   ├── DanhMucUI.java                  #  Category management interface&#10;│   ├── MauSacUI.java                   #  Color management interface&#10;│   ├── KichThuocUI.java                #  Size management interface&#10;│   ├── PhieuDoiTraUI.java              #  Return/Exchange management&#10;│   ├── TheThanThietUI.java             #  Loyalty card management&#10;│   ├── NhaCungCapUI.java               #  Supplier management interface&#10;│   ├── BaoCaoUI.java                   #  Report and analytics interface&#10;│   ├── HinhThucThanhToanUI.java        #  Payment method management&#10;│   ├── ChiTietHoaDonDialog.java        #  Invoice detail dialog&#10;│   ├── ThemSanPhamDialog.java          # ➕ Add product dialog&#10;│   ├── ThemPhieuDoiTraDialog.java      # ➕ Add return/exchange dialog&#10;│   ├── PhieuDoiTraDetailUI.java        #  Return detail view&#10;│   ├── PhieuDoiTraFormUI.java          #  Return form interface&#10;│   ├── PhieuDoiTraCompleteUI.java      # ✅ Return completion interface&#10;│   ├── PhieuDoiTraUINew.java           #  Enhanced return interface&#10;│   └── DoiTraWorkflowDiagram.java      #  Return workflow visualization&#10;├──  model/&#10;│   ├── SanPham.java                    #  Product entity&#10;│   ├── TaiKhoan.java                   #  Account entity&#10;│   ├── NhanVien.java                   #  Employee entity&#10;│   ├── HoaDon.java                     #  Invoice entity&#10;│   ├── BienTheSanPham.java             #  Product variant entity&#10;│   ├── ChiTietHoaDon.java              #  Invoice detail entity&#10;│   ├── KhachHang.java                  #  Customer entity&#10;│   ├── DanhMuc.java                    #  Category entity&#10;│   ├── MauSac.java                     #  Color entity&#10;│   ├── KichThuoc.java                  #  Size entity&#10;│   ├── PhieuDoiTra.java                #  Return/Exchange entity&#10;│   ├── ChiTietPhieuDoiTra.java         #  Return detail entity&#10;│   ├── TheThanThiet.java               #  Loyalty card entity&#10;│   ├── LichSuDiem.java                 #  Point history entity&#10;│   ├── NhaCungCap.java                 #  Supplier entity&#10;│   ├── DonDatHang.java                 #  Purchase order entity&#10;│   ├── ChiTietDatHang.java             #  Purchase order detail entity&#10;│   ├── ChuongTrinhKhuyenMai.java       #  Promotion program entity&#10;│   ├── HinhThucThanhToan.java          #  Payment method entity&#10;│   ├── BaoCao.java                     #  Report entity&#10;│   ├── ThongKeDoanhThu.java            #  Revenue statistics entity&#10;│   ├── ThongKeSanPham.java             #  Product statistics entity&#10;│   ├── ChiTietHoaDonId.java            #  Invoice detail composite key&#10;│   ├── ChiTietPhieuDoiTraId.java       #  Return detail composite key&#10;│   └── ChiTietDatHangId.java           #  Purchase detail composite key&#10;└──  main/&#10;    ├── Main.java                       #  Application entry point&#10;    └── Health.java                     #  Database health check utility&#10;```&#10;&#10;## ⚙️ Setup &amp; Installation&#10;&#10;### ** Prerequisites**&#10;&#10;#### **System Requirements**&#10;- **Java 21** or higher (OpenJDK or Oracle JDK)&#10;- **Maven 3.8+** for dependency management&#10;- **SQL Server 2019+** (Express, Standard, or Enterprise)&#10;- **4GB RAM minimum** (8GB recommended)&#10;- **2GB free disk space** for application and database&#10;&#10;#### **Development Environment**&#10;- **IDE**: IntelliJ IDEA (recommended), Eclipse, or VS Code with Java extensions&#10;- **Git** for version control&#10;- **SQL Server Management Studio (SSMS)** for database management (optional)&#10;&#10;### ** Installation Steps**&#10;&#10;#### **1. Clone the Repository**&#10;```bash&#10;git clone https://github.com/Mew-Kyu/ASM-Java-UIT.git&#10;cd ASM-Java-UIT&#10;```&#10;&#10;#### **2. Database Setup**&#10;&#10;**Option A: Automatic Setup (Recommended)**&#10;```bash&#10;# Run the provided SQL script (handles database creation automatically)&#10;sqlcmd -S localhost -E -i script.sql&#10;```&#10;&#10;**Option B: Manual Setup**&#10;```sql&#10;-- Connect to SQL Server and create database&#10;CREATE DATABASE QuanLyCuaHangQuanAo;&#10;GO&#10;&#10;-- Run the script.sql file to create tables and seed data&#10;USE QuanLyCuaHangQuanAo;&#10;-- Execute script.sql content&#10;```&#10;&#10;#### **3. Database Configuration**&#10;&#10;Edit `src/main/resources/META-INF/persistence.xml`:&#10;&#10;```xml&#10;&lt;properties&gt;&#10;    &lt;!-- Database Connection --&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.url&quot;&#10;              value=&quot;jdbc:sqlserver://localhost:1433;databaseName=QuanLyCuaHangQuanAo;trustServerCertificate=true&quot;/&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.user&quot; value=&quot;sa&quot;/&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.password&quot; value=&quot;your_password&quot;/&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.driver&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;&#10;&#10;    &lt;!-- Hibernate Configuration --&gt;&#10;    &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.SQLServerDialect&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;&#10;    &lt;!-- Connection Pool (HikariCP) --&gt;&#10;    &lt;property name=&quot;hibernate.connection.provider_class&quot;&#10;              value=&quot;org.hibernate.hikaricp.internal.HikariCPConnectionProvider&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hikari.minimumIdle&quot; value=&quot;3&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hikari.maximumPoolSize&quot; value=&quot;10&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hikari.connectionTimeout&quot; value=&quot;30000&quot;/&gt;&#10;&lt;/properties&gt;&#10;```&#10;&#10;#### **4. Build the Project**&#10;```bash&#10;# Clean and compile&#10;mvn clean compile&#10;&#10;# Run tests (optional)&#10;mvn test&#10;&#10;# Package the application&#10;mvn package&#10;```&#10;&#10;#### **5. Database Health Check**&#10;```bash&#10;# Test database connection&#10;mvn exec:java -Dexec.mainClass=&quot;main.Health&quot;&#10;```&#10;&#10;#### **6. Run the Application**&#10;```bash&#10;# Start the application&#10;mvn exec:java -Dexec.mainClass=&quot;main.Main&quot;&#10;&#10;# Alternative: Run from IDE&#10;# Open Main.java and run the main method&#10;```&#10;&#10;```&#10;&#10;### ** IDE Setup**&#10;&#10;#### **IntelliJ IDEA Configuration**&#10;1. **Import Project**: File → Open → Select project folder&#10;2. **Set JDK**: File → Project Structure → Project → SDK → Java 21&#10;3. **Maven Configuration**: Enable auto-import in Maven settings&#10;4. **Database Connection**: Add SQL Server data source in Database tool window&#10;5. **Run Configuration**: Create new Application configuration with main class `main.Main`&#10;&#10;#### **Eclipse Configuration**&#10;1. **Import Project**: File → Import → Existing Maven Projects&#10;2. **Set JRE**: Right-click project → Properties → Java Build Path → Libraries → Modulepath → JRE&#10;3. **Maven Integration**: Right-click project → Maven → Reload Projects&#10;&#10;##  Configuration&#10;&#10;### **Database Configuration**&#10;&#10;#### **Connection Pool Settings (HikariCP)**&#10;The application uses **HikariCP** for high-performance connection pooling:&#10;&#10;```xml&#10;&lt;!-- HikariCP Configuration --&gt;&#10;&lt;property name=&quot;hibernate.connection.provider_class&quot;&#10;          value=&quot;org.hibernate.hikaricp.internal.HikariCPConnectionProvider&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.minimumIdle&quot; value=&quot;3&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.maximumPoolSize&quot; value=&quot;10&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.connectionTimeout&quot; value=&quot;30000&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.idleTimeout&quot; value=&quot;600000&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.maxLifetime&quot; value=&quot;1800000&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.leakDetectionThreshold&quot; value=&quot;60000&quot;/&gt;&#10;```&#10;&#10;#### **JPA/Hibernate Settings**&#10;```xml&#10;&lt;!-- Hibernate Configuration --&gt;&#10;&lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.SQLServerDialect&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.use_sql_comments&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.jdbc.batch_size&quot; value=&quot;20&quot;/&gt;&#10;&lt;property name=&quot;hibernate.order_inserts&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.order_updates&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.jdbc.batch_versioned_data&quot; value=&quot;true&quot;/&gt;&#10;```&#10;&#10;### **Application Configuration**&#10;&#10;#### **Dependency Injection Setup**&#10;The application uses a custom DI container configured in `ApplicationConfig.java`:&#10;&#10;```java&#10;// Service Registration Example&#10;container.registerSingletonFactory(ISanPhamService.class, () -&gt; {&#10;    ISanPhamDAO sanPhamDAO = container.getService(ISanPhamDAO.class);&#10;    IDanhMucDAO danhMucDAO = container.getService(IDanhMucDAO.class);&#10;    return new SanPhamServiceImpl(sanPhamDAO, danhMucDAO);&#10;});&#10;```&#10;&#10;#### **Logging Configuration**&#10;Comprehensive logging using `java.util.logging`:&#10;&#10;```java&#10;// Logging Levels:&#10;// - INFO: Application lifecycle events, user actions&#10;// - FINE: Business operations, service calls&#10;// - WARNING: Recoverable errors, validation failures&#10;// - SEVERE: Critical errors, system failures&#10;&#10;// Example Logger Usage&#10;private static final Logger LOGGER = Logger.getLogger(ClassName.class.getName());&#10;LOGGER.info(&quot;User logged in: &quot; + username);&#10;LOGGER.warning(&quot;Validation failed for product: &quot; + productName);&#10;LOGGER.severe(&quot;Database connection failed: &quot; + e.getMessage());&#10;```&#10;&#10;### **Security Configuration**&#10;&#10;#### **Password Security**&#10;- **Algorithm**: BCrypt with automatic salt generation&#10;- **Rounds**: 12 (configurable for security vs performance)&#10;- **Validation**: Minimum 8 characters, complexity requirements&#10;&#10;```java&#10;// Password Hashing Example&#10;String hashedPassword = PasswordUtils.hashPassword(plainPassword);&#10;boolean isValid = PasswordUtils.checkPassword(plainPassword, hashedPassword);&#10;```&#10;&#10;#### **Session Management**&#10;- **Session Timeout**: 30 minutes of inactivity (configurable)&#10;- **Automatic Cleanup**: Sessions cleaned on logout or timeout&#10;- **Security**: Session data stored in memory, not persisted&#10;&#10;#### **Role-Based Access Control**&#10;- **Roles**: ADMIN, MANAGER, STAFF with hierarchical permissions&#10;- **Enforcement**: UI, Controller, and Service layer validation&#10;- **Granular Permissions**: Feature-specific access control&#10;&#10;### **Performance Configuration**&#10;&#10;#### **JVM Tuning**&#10;Recommended JVM settings for production:&#10;&#10;```bash&#10;java -Xms512m -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 \&#10;     -XX:+UseStringDeduplication -XX:+OptimizeStringConcat \&#10;     -Dfile.encoding=UTF-8 -Duser.timezone=Asia/Ho_Chi_Minh \&#10;     -jar QLCHQuanAo-1.0-SNAPSHOT.jar&#10;```&#10;&#10;#### **Database Optimization**&#10;- **Indexing**: Automatic indexes on foreign keys and frequently queried columns&#10;- **Query Optimization**: Use of JPA fetch strategies and query hints&#10;- **Connection Pooling**: Optimized pool size based on concurrent users&#10;&#10;### **Environment-Specific Configuration**&#10;&#10;#### **Development Environment**&#10;```xml&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;&#10;```&#10;&#10;#### **Production Environment**&#10;```xml&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;&lt;property name=&quot;hibernate.jdbc.batch_size&quot; value=&quot;50&quot;/&gt;&#10;```&#10;&#10;### **Internationalization (i18n)**&#10;- **Primary Language**: Vietnamese (vi_VN)&#10;- **Character Encoding**: UTF-8 throughout the application&#10;- **Date/Time Format**: Vietnamese locale standards&#10;- **Currency**: Vietnamese Dong (VNĐ) formatting&#10;&#10;##  Database Schema&#10;&#10;### **Core Entities**&#10;&#10;#### **Product Management**&#10;```sql&#10;-- Categories (Danh Mục)&#10;DanhMuc (&#10;    MaDM INT PRIMARY KEY IDENTITY,&#10;    TenDM NVARCHAR(100) NOT NULL,&#10;    MoTa NVARCHAR(500),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Products (Sản Phẩm)&#10;SanPham (&#10;    MaSP INT PRIMARY KEY IDENTITY,&#10;    TenSP NVARCHAR(200) NOT NULL,&#10;    MaDM INT FOREIGN KEY REFERENCES DanhMuc(MaDM),&#10;    MoTa NVARCHAR(1000),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Colors (Màu Sắc)&#10;MauSac (&#10;    MaMau INT PRIMARY KEY IDENTITY,&#10;    TenMau NVARCHAR(50) NOT NULL,&#10;    MaHex VARCHAR(7),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Sizes (Kích Thước)&#10;KichThuoc (&#10;    MaSize INT PRIMARY KEY IDENTITY,&#10;    TenSize NVARCHAR(20) NOT NULL,&#10;    MoTa NVARCHAR(100),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Product Variants (Biến Thể Sản Phẩm)&#10;BienTheSanPham (&#10;    MaBienThe INT PRIMARY KEY IDENTITY,&#10;    MaSP INT FOREIGN KEY REFERENCES SanPham(MaSP),&#10;    MaMau INT FOREIGN KEY REFERENCES MauSac(MaMau),&#10;    MaSize INT FOREIGN KEY REFERENCES KichThuoc(MaSize),&#10;    SoLuong INT NOT NULL DEFAULT 0,&#10;    GiaBan DECIMAL(18,2) NOT NULL,&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;```&#10;&#10;#### **User Management**&#10;```sql&#10;-- Employees (Nhân Viên)&#10;NhanVien (&#10;    MaNV INT PRIMARY KEY IDENTITY,&#10;    HoTen NVARCHAR(100) NOT NULL,&#10;    NgaySinh DATE,&#10;    GioiTinh NVARCHAR(10),&#10;    DienThoai VARCHAR(20),&#10;    Email VARCHAR(100),&#10;    DiaChi NVARCHAR(300),&#10;    NgayVaoLam DATE DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Accounts (Tài Khoản)&#10;TaiKhoan (&#10;    TenDangNhap VARCHAR(50) PRIMARY KEY,&#10;    MatKhau VARCHAR(100) NOT NULL,&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    Quyen VARCHAR(20) NOT NULL CHECK (Quyen IN ('ADMIN', 'MANAGER', 'STAFF')),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Customers (Khách Hàng)&#10;KhachHang (&#10;    MaKH INT PRIMARY KEY IDENTITY,&#10;    HoTen NVARCHAR(100) NOT NULL,&#10;    DienThoai VARCHAR(20),&#10;    Email VARCHAR(100),&#10;    DiaChi NVARCHAR(300),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;```&#10;&#10;#### **Sales Management**&#10;```sql&#10;-- Invoices (Hóa Đơn)&#10;HoaDon (&#10;    MaHD INT PRIMARY KEY IDENTITY,&#10;    MaKH INT FOREIGN KEY REFERENCES KhachHang(MaKH),&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    NgayLap DATE DEFAULT GETDATE(),&#10;    TongTien DECIMAL(18,2) NOT NULL DEFAULT 0,&#10;    TrangThai NVARCHAR(20) DEFAULT 'COMPLETED'&#10;)&#10;&#10;-- Invoice Details (Chi Tiết Hóa Đơn)&#10;ChiTietHoaDon (&#10;    MaHD INT FOREIGN KEY REFERENCES HoaDon(MaHD),&#10;    MaBienThe INT FOREIGN KEY REFERENCES BienTheSanPham(MaBienThe),&#10;    SoLuong INT NOT NULL,&#10;    GiaBan DECIMAL(18,2) NOT NULL,&#10;    PRIMARY KEY (MaHD, MaBienThe)&#10;)&#10;```&#10;&#10;### **Advanced Features Entities**&#10;&#10;#### **Returns &amp; Exchanges**&#10;```sql&#10;-- Return/Exchange Receipts (Phiếu Đổi Trả)&#10;PhieuDoiTra (&#10;    MaPhieuDT INT PRIMARY KEY IDENTITY,&#10;    MaHD INT FOREIGN KEY REFERENCES HoaDon(MaHD),&#10;    LoaiPhieu VARCHAR(10) CHECK (LoaiPhieu IN ('DOI', 'TRA')),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    MaKH INT FOREIGN KEY REFERENCES KhachHang(MaKH),&#10;    LyDo NVARCHAR(500) NOT NULL,&#10;    TrangThai VARCHAR(20) DEFAULT 'PENDING',&#10;    TongTienHoan DECIMAL(18,2) DEFAULT 0,&#10;    NgayDuyet DATETIME,&#10;    NguoiDuyet INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    GhiChu NVARCHAR(500)&#10;)&#10;&#10;-- Return Details (Chi Tiết Phiếu Đổi Trả)&#10;ChiTietPhieuDoiTra (&#10;    MaPhieuDT INT FOREIGN KEY REFERENCES PhieuDoiTra(MaPhieuDT),&#10;    MaBienThe INT FOREIGN KEY REFERENCES BienTheSanPham(MaBienThe),&#10;    SoLuong INT NOT NULL,&#10;    GiaBan DECIMAL(18,2) NOT NULL,&#10;    LyDo NVARCHAR(200),&#10;    PRIMARY KEY (MaPhieuDT, MaBienThe)&#10;)&#10;```&#10;&#10;#### **Loyalty System**&#10;```sql&#10;-- Loyalty Cards (Thẻ Thân Thiết)&#10;TheThanThiet (&#10;    MaThe INT PRIMARY KEY IDENTITY,&#10;    MaKH INT UNIQUE FOREIGN KEY REFERENCES KhachHang(MaKH),&#10;    SoThe VARCHAR(20) UNIQUE NOT NULL,&#10;    LoaiThe VARCHAR(20) CHECK (LoaiThe IN ('BRONZE', 'SILVER', 'GOLD', 'PLATINUM', 'DIAMOND')),&#10;    DiemTichLuy INT DEFAULT 0,&#10;    DiemDaSuDung INT DEFAULT 0,&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    NgayCapNhat DATETIME DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Point History (Lịch Sử Điểm)&#10;LichSuDiem (&#10;    MaLS INT PRIMARY KEY IDENTITY,&#10;    MaThe INT FOREIGN KEY REFERENCES TheThanThiet(MaThe),&#10;    LoaiGiaoDich VARCHAR(20) CHECK (LoaiGiaoDich IN ('EARN', 'REDEEM', 'EXPIRE', 'ADJUST')),&#10;    SoDiem INT NOT NULL,&#10;    MaHD INT FOREIGN KEY REFERENCES HoaDon(MaHD),&#10;    NgayGiaoDich DATETIME DEFAULT GETDATE(),&#10;    MoTa NVARCHAR(200),&#10;    NguoiThucHien INT FOREIGN KEY REFERENCES NhanVien(MaNV)&#10;)&#10;```&#10;&#10;#### **Supplier Management**&#10;```sql&#10;-- Suppliers (Nhà Cung Cấp)&#10;NhaCungCap (&#10;    MaNCC INT PRIMARY KEY IDENTITY,&#10;    TenNCC NVARCHAR(200) NOT NULL,&#10;    DiaChi NVARCHAR(300),&#10;    DienThoai VARCHAR(20),&#10;    Email VARCHAR(100),&#10;    NguoiLienHe NVARCHAR(100),&#10;    ChucVuLienHe NVARCHAR(50),&#10;    NgayHopTac DATE DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1,&#10;    Rating INT DEFAULT 0 CHECK (Rating BETWEEN 0 AND 5),&#10;    TongGiaTriMua DECIMAL(18,2) DEFAULT 0,&#10;    SoDonHang INT DEFAULT 0&#10;)&#10;&#10;-- Purchase Orders (Đơn Đặt Hàng)&#10;DonDatHang (&#10;    MaDDH INT PRIMARY KEY IDENTITY,&#10;    MaNCC INT FOREIGN KEY REFERENCES NhaCungCap(MaNCC),&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    NgayDuKien DATE,&#10;    NgayGiaoHang DATE,&#10;    TrangThai VARCHAR(20) DEFAULT 'DRAFT',&#10;    TongTien DECIMAL(18,2) DEFAULT 0,&#10;    ThueVAT DECIMAL(5,2) DEFAULT 0,&#10;    PhiVanChuyen DECIMAL(18,2) DEFAULT 0,&#10;    TongThanhToan DECIMAL(18,2) DEFAULT 0&#10;)&#10;```&#10;&#10;### **Entity Relationships**&#10;&#10;#### **Core Relationships**&#10;- **DanhMuc** (1) → (N) **SanPham**: Category contains multiple products&#10;- **SanPham** (1) → (N) **BienTheSanPham**: Product has multiple variants&#10;- **MauSac** (1) → (N) **BienTheSanPham**: Color used in multiple variants&#10;- **KichThuoc** (1) → (N) **BienTheSanPham**: Size used in multiple variants&#10;- **NhanVien** (1) → (1) **TaiKhoan**: Employee has one account&#10;- **KhachHang** (1) → (N) **HoaDon**: Customer has multiple invoices&#10;- **NhanVien** (1) → (N) **HoaDon**: Employee creates multiple invoices&#10;- **HoaDon** (1) → (N) **ChiTietHoaDon**: Invoice has multiple line items&#10;- **BienTheSanPham** (1) → (N) **ChiTietHoaDon**: Variant sold in multiple invoices&#10;&#10;#### **Advanced Feature Relationships**&#10;- **HoaDon** (1) → (N) **PhieuDoiTra**: Invoice can have multiple returns&#10;- **PhieuDoiTra** (1) → (N) **ChiTietPhieuDoiTra**: Return has multiple items&#10;- **KhachHang** (1) → (1) **TheThanThiet**: Customer has one loyalty card&#10;- **TheThanThiet** (1) → (N) **LichSuDiem**: Card has point transaction history&#10;- **NhaCungCap** (1) → (N) **DonDatHang**: Supplier receives multiple orders&#10;&#10;##  User Interface&#10;&#10;### ** Design Principles**&#10;- **Responsive Layout**: Adapts to different screen sizes&#10;- **Intuitive Navigation**: Clear menu structure&#10;- **Role-Based UI**: Different interfaces for different user roles&#10;- **Consistent Styling**: Uniform look and feel across all screens&#10;&#10;### ** Authentication Flow**&#10;```&#10;Login Screen → Role Verification → Main Dashboard → Feature Access&#10;```&#10;&#10;### ** Role-Based Features**&#10;&#10;| Role | Product Mgmt | Employee Mgmt | Account Mgmt | Sales | Reports |&#10;|------|--------------|---------------|--------------|-------|---------|&#10;| **Admin** | ✅ Full | ✅ Full | ✅ Full | ✅ Full | ✅ Full |&#10;| **Manager** | ✅ Full | ❌ View Only | ❌ None | ✅ Full | ✅ Full |&#10;| **Staff** | ️ View Only | ❌ None | ❌ None | ✅ Limited | ️ View Only |&#10;&#10;##  Security &amp; Authentication&#10;&#10;### ** Authentication System**&#10;- **Secure Login**: Username/password with encryption&#10;- **Session Management**: Automatic timeout and cleanup&#10;- **Password Security**: BCrypt hashing with salt&#10;- **Brute Force Protection**: Account lockout mechanisms&#10;&#10;### ** Authorization System &amp; Role Management**&#10;&#10;The application implements a comprehensive **Role-Based Access Control (RBAC)** system with three distinct user roles and granular permission management.&#10;&#10;#### **️ Authorization Architecture**&#10;&#10;```java&#10;SessionManager (Singleton)&#10;    ↓&#10;RoleManager (Static Permission Checker)&#10;    ↓&#10;UI Components (Dynamic Role-Based Rendering)&#10;    ↓&#10;Controller Layer (Double Permission Check)&#10;```&#10;&#10;#### ** User Roles &amp; Hierarchy**&#10;&#10;| Role | Level | Description |&#10;|------|-------|-------------|&#10;| ** ADMIN** | 1 | System administrator with full access |&#10;| ** MANAGER** | 2 | Store manager with operational control |&#10;| ** STAFF** | 3 | Sales staff with limited access |&#10;&#10;#### ** Detailed Permission Matrix**&#10;&#10;| **Chức Năng** | **ADMIN** | **MANAGER** | **STAFF** |&#10;|---------------|-----------|-------------|-----------|&#10;| ** Quản lý tài khoản** | ✅ **Full Access** | ❌ **No Access** | ❌ **No Access** |&#10;| ** Quản lý nhân viên** | ✅ **Full Access** | ❌ **No Access** | ❌ **No Access** |&#10;| ** Quản lý danh mục** | ✅ **Create/Edit/Delete** | ✅ **Create/Edit/Delete** | ❌ **No Access** |&#10;| ** Quản lý màu sắc** | ✅ **Create/Edit/Delete** | ✅ **Create/Edit/Delete** | ❌ **No Access** |&#10;| ** Quản lý kích thước** | ✅ **Create/Edit/Delete** | ✅ **Create/Edit/Delete** | ❌ **No Access** |&#10;| ** Quản lý sản phẩm** | ✅ **Full CRUD** | ✅ **Full CRUD** | ️ **View Only** |&#10;| ** Quản lý khách hàng** | ✅ **Full CRUD** | ✅ **Full CRUD** | ✅ **Create/View** |&#10;| ** Quản lý hóa đơn** | ✅ **Full Access** | ✅ **Full Access** | ✅ **Create/View Own** |&#10;| ** Quản lý biến thể** | ✅ **Full CRUD** | ✅ **Full CRUD** | ✅ **View/Basic Edit** |&#10;| ** Xem báo cáo** | ✅ **All Reports** | ✅ **All Reports** | ❌ **No Access** |&#10;&#10;#### ** Implementation Details**&#10;&#10;##### **1. Session Management**&#10;```java&#10;public class SessionManager {&#10;    private static SessionManager instance;&#10;    private TaiKhoan currentUser;&#10;    private boolean isLoggedIn = false;&#10;    &#10;    public String getCurrentUserRole() {&#10;        return currentUser != null ? currentUser.getQuyen() : null;&#10;    }&#10;}&#10;```&#10;&#10;##### **2. Role Manager**&#10;```java&#10;public class RoleManager {&#10;    // Role constants&#10;    public static final String ADMIN = &quot;ADMIN&quot;;&#10;    public static final String MANAGER = &quot;MANAGER&quot;;&#10;    public static final String STAFF = &quot;STAFF&quot;;&#10;    &#10;    // Permission methods&#10;    public static boolean canAccessAccountManagement() {&#10;        return isAdmin();&#10;    }&#10;    &#10;    public static boolean canAccessProductConfiguration() {&#10;        return isManagerOrHigher();&#10;    }&#10;}&#10;```&#10;&#10;##### **3. UI Security Implementation**&#10;```java&#10;// Dynamic menu generation based on role&#10;if (RoleManager.canAccessAccountManagement()) {&#10;    JButton btnTaiKhoan = createMenuButton(&quot;Quản Lý Tài Khoản&quot;);&#10;    menuPanel.add(btnTaiKhoan);&#10;}&#10;&#10;// Double-check on action&#10;private void openTaiKhoanUI() {&#10;    if (!RoleManager.canAccessAccountManagement()) {&#10;        RoleManager.showAccessDeniedMessage(this, &quot;Admin&quot;);&#10;        return;&#10;    }&#10;    new TaiKhoanUI().setVisible(true);&#10;}&#10;```&#10;&#10;#### **️ Security Layers**&#10;&#10;##### **Layer 1: Authentication Check**&#10;```java&#10;if (!SessionManager.getInstance().isLoggedIn()) {&#10;    JOptionPane.showMessageDialog(null, &quot;Vui lòng đăng nhập trước!&quot;);&#10;    new LoginUI().setVisible(true);&#10;    return;&#10;}&#10;```&#10;&#10;##### **Layer 2: Authorization Check**&#10;```java&#10;if (!RoleManager.canAccessFeature()) {&#10;    RoleManager.showAccessDeniedMessage(this, &quot;Required Role&quot;);&#10;    this.dispose();&#10;    return;&#10;}&#10;```&#10;&#10;##### **Layer 3: UI Rendering**&#10;- Buttons only appear if user has permission&#10;- Dynamic menu generation based on role&#10;- Real-time permission validation&#10;&#10;##### **Layer 4: Controller Validation**&#10;- All controller actions verify permissions&#10;- Service layer enforces business rules&#10;- Database operations require authenticated session&#10;&#10;#### ** Password Security**&#10;&#10;```java&#10;public class PasswordUtils {&#10;    // BCrypt with salt for secure hashing&#10;    public static String hashPassword(String plainPassword) {&#10;        return BCrypt.hashpw(plainPassword, BCrypt.gensalt());&#10;    }&#10;    &#10;    public static boolean checkPassword(String plainPassword, String hashedPassword) {&#10;        return BCrypt.checkpw(plainPassword, hashedPassword);&#10;    }&#10;}&#10;```&#10;&#10;#### ** Access Control Flow**&#10;&#10;```mermaid&#10;graph TD&#10;    A[User Login] --&gt; B{Authentication Check}&#10;    B --&gt;|Success| C[SessionManager Stores User]&#10;    B --&gt;|Fail| D[Access Denied]&#10;    &#10;    C --&gt; E{Role Verification}&#10;    E --&gt; F[ADMIN - Full Access]&#10;    E --&gt; G[MANAGER - Limited Access]&#10;    E --&gt; H[STAFF - Basic Access]&#10;    &#10;    F --&gt; I[All Features Available]&#10;    G --&gt; J[Management Features Only]&#10;    H --&gt; K[Basic Operations Only]&#10;```&#10;&#10;#### **⚙️ Configuration**&#10;&#10;The role system is configured through the database `TaiKhoan` table:&#10;```sql&#10;TaiKhoan (&#10;    TenDangNhap VARCHAR(50) PRIMARY KEY,&#10;    MatKhau VARCHAR(100),        -- BCrypt hashed&#10;    MaNV INT,                    -- Employee reference&#10;    Quyen VARCHAR(20)            -- 'ADMIN', 'MANAGER', 'STAFF'&#10;)&#10;```&#10;&#10;### **️ Security Best Practices**&#10;- **Input Validation**: Comprehensive validation at all layers&#10;- **SQL Injection Prevention**: Parameterized queries with JPA&#10;- **XSS Prevention**: Input sanitization and encoding&#10;- **Error Handling**: No sensitive information in error messages&#10;- **Session Security**: Automatic logout and session timeout&#10;- **Multi-layer Authorization**: UI, Controller, and Service level checks&#10;- **Password Security**: BCrypt hashing with configurable rounds&#10;- **Audit Logging**: All critical operations logged with user context&#10;&#10;##  Usage Guide&#10;&#10;### ** Getting Started**&#10;&#10;#### **First Time Setup**&#10;1. **Start the Application**: Run `main.Main` class&#10;2. **Login Screen**: Use default admin credentials&#10;   - Username: `admin`&#10;   - Password: `admin123`&#10;3. **Change Default Password**: Immediately change the default admin password&#10;4. **Create Employees**: Add employee records before creating accounts&#10;5. **Setup Basic Data**: Add categories, colors, sizes before products&#10;&#10;#### **Default User Accounts**&#10;The system comes with pre-configured accounts for testing:&#10;&#10;| Username | Password | Role | Description |&#10;|----------|----------|------|-------------|&#10;| `admin` | `admin123` | ADMIN | System administrator |&#10;| `manager` | `manager123` | MANAGER | Store manager |&#10;| `staff` | `staff123` | STAFF | Sales staff |&#10;&#10;⚠️ **Security Note**: Change all default passwords in production!&#10;&#10;### ** User Management Workflow**&#10;&#10;#### **Creating New Employees**&#10;1. **Navigate**: Main Menu → Quản Lý Nhân Viên&#10;2. **Add Employee**: Click &quot;Thêm&quot; button&#10;3. **Fill Information**: Complete all required fields&#10;4. **Save**: Employee record is created with unique ID&#10;&#10;#### **Creating User Accounts**&#10;1. **Navigate**: Main Menu → Quản Lý Tài Khoản (Admin only)&#10;2. **Add Account**: Click &quot;Thêm&quot; button&#10;3. **Select Employee**: Choose from existing employee list&#10;4. **Set Role**: Assign appropriate role (ADMIN/MANAGER/STAFF)&#10;5. **Set Password**: Create secure password&#10;6. **Save**: Account is created and ready for use&#10;&#10;### ** Product Management Workflow**&#10;&#10;#### **Setting Up Product Catalog**&#10;1. **Categories First**: Create product categories&#10;   - Navigate: Main Menu → Quản Lý Danh Mục&#10;   - Add categories like &quot;Áo&quot;, &quot;Quần&quot;, &quot;Phụ kiện&quot;&#10;&#10;2. **Colors and Sizes**: Set up variants&#10;   - Colors: Main Menu → Quản Lý Màu Sắc&#10;   - Sizes: Main Menu → Quản Lý Kích Thước&#10;&#10;3. **Add Products**: Create base products&#10;   - Navigate: Main Menu → Quản Lý Sản Phẩm&#10;   - Add product with category assignment&#10;&#10;4. **Create Variants**: Add specific variants&#10;   - Navigate: Main Menu → Quản Lý Hàng Hóa&#10;   - Create variants with color, size, quantity, price&#10;&#10;### ** Sales Process Workflow**&#10;&#10;#### **Creating an Invoice**&#10;1. **Navigate**: Main Menu → Quản Lý Hóa Đơn&#10;2. **New Invoice**: Click &quot;Thêm Hóa Đơn&quot;&#10;3. **Customer Selection**:&#10;   - Select existing customer OR&#10;   - Create new customer on-the-fly&#10;4. **Add Products**:&#10;   - Search and select product variants&#10;   - Specify quantities&#10;   - System automatically calculates totals&#10;5. **Apply Discounts**: Apply loyalty card benefits or promotions&#10;6. **Complete Sale**: Save invoice and print receipt&#10;7. **Inventory Update**: Stock levels automatically adjusted&#10;&#10;#### **Processing Payments**&#10;1. **Payment Method**: Select from configured payment methods&#10;2. **Amount Calculation**: System calculates total with taxes/discounts&#10;3. **Loyalty Points**: Automatically award points to loyalty card holders&#10;4. **Receipt Generation**: Print or email PDF receipt&#10;&#10;### ** Returns &amp; Exchange Process**&#10;&#10;#### **Creating Return/Exchange**&#10;1. **Navigate**: Main Menu → Quản Lý Đổi Trả&#10;2. **New Return**: Click &quot;Tạo Phiếu Đổi Trả&quot;&#10;3. **Invoice Lookup**: Enter original invoice number&#10;4. **Validation**: System checks 30-day return policy&#10;5. **Select Items**: Choose items to return/exchange&#10;6. **Reason**: Specify return reason&#10;7. **Submit**: Create return request (Status: PENDING)&#10;&#10;#### **Approval Process** (Manager/Admin)&#10;1. **Review Returns**: View pending return requests&#10;2. **Approve/Reject**: Make decision with comments&#10;3. **Process Refund**: Handle refund if approved&#10;4. **Update Inventory**: Restore returned items to stock&#10;&#10;### ** Loyalty Card Management**&#10;&#10;#### **Creating Loyalty Cards**&#10;1. **Navigate**: Main Menu → Khách Hàng Thân Thiết&#10;2. **New Card**: Click &quot;Tạo Thẻ Mới&quot;&#10;3. **Customer Selection**: Choose existing customer&#10;4. **Card Generation**: System generates unique card number&#10;5. **Initial Tier**: Starts at BRONZE level&#10;6. **Activation**: Card is immediately active&#10;&#10;#### **Point Management**&#10;- **Earning Points**: Automatic on purchases (1% of purchase amount)&#10;- **Tier Benefits**: Higher tiers get better rates and discounts&#10;- **Point Redemption**: Use points for discounts on future purchases&#10;- **Tier Upgrades**: Automatic based on spending thresholds&#10;&#10;### ** Reporting &amp; Analytics**&#10;&#10;#### **Accessing Reports**&#10;1. **Navigate**: Main Menu → Báo Cáo &amp; Thống Kê (Manager/Admin only)&#10;2. **Select Report Type**: Choose from available reports&#10;3. **Set Parameters**: Date ranges, filters, etc.&#10;4. **Generate**: View report on screen&#10;5. **Export**: Save as PDF or print&#10;&#10;#### **Available Reports**&#10;- **Revenue Reports**: Daily, weekly, monthly revenue analysis&#10;- **Product Performance**: Best/worst selling products&#10;- **Customer Analytics**: Customer behavior and preferences&#10;- **Inventory Reports**: Stock levels and turnover rates&#10;- **Employee Performance**: Sales performance by staff member&#10;&#10;### ** Supplier Management**&#10;&#10;#### **Managing Suppliers**&#10;1. **Navigate**: Main Menu → Quản Lý Nhà Cung Cấp&#10;2. **Add Supplier**: Complete supplier information&#10;3. **Rate Suppliers**: Track performance with 5-star rating&#10;4. **Purchase Orders**: Create orders for inventory replenishment&#10;5. **Track Deliveries**: Monitor order status and delivery&#10;&#10;### **⚙️ System Administration**&#10;&#10;#### **User Role Management**&#10;- **ADMIN**: Full system access, user management&#10;- **MANAGER**: Operations management, reports, no user management&#10;- **STAFF**: Sales operations, customer service, limited access&#10;&#10;#### **Data Backup**&#10;- **Database Backup**: Regular SQL Server backups recommended&#10;- **Export Data**: Use reporting features to export critical data&#10;- **System Logs**: Monitor application logs for issues&#10;&#10;#### **Performance Monitoring**&#10;- **Database Health**: Use `main.Health` class to test connections&#10;- **Session Management**: Monitor active user sessions&#10;- **Error Tracking**: Review application logs for errors&#10;&#10;##  Testing&#10;&#10;### **Manual Testing**&#10;&#10;#### **Test User Accounts**&#10;Use these accounts for testing different role functionalities:&#10;&#10;```&#10;Admin Account:&#10;- Username: admin&#10;- Password: admin123&#10;- Access: Full system access&#10;&#10;Manager Account:&#10;- Username: manager&#10;- Password: manager123&#10;- Access: Operations and reports&#10;&#10;Staff Account:&#10;- Username: staff&#10;- Password: staff123&#10;- Access: Sales and customer service&#10;```&#10;&#10;#### **Test Data**&#10;The system includes sample data for testing:&#10;- **Categories**: Áo, Quần, Phụ kiện&#10;- **Colors**: Đỏ, Xanh, Vàng, Đen, Trắng&#10;- **Sizes**: S, M, L, XL, XXL&#10;- **Sample Products**: Various clothing items with variants&#10;- **Test Customers**: Sample customer records&#10;&#10;#### **Testing Scenarios**&#10;&#10;**1. User Authentication Testing**&#10;```&#10;✅ Valid login with correct credentials&#10;✅ Invalid login with wrong credentials&#10;✅ Role-based access control&#10;✅ Session timeout functionality&#10;✅ Password change functionality&#10;```&#10;&#10;**2. Product Management Testing**&#10;```&#10;✅ Create/Edit/Delete categories&#10;✅ Create/Edit/Delete products&#10;✅ Create/Edit/Delete product variants&#10;✅ Search and filter functionality&#10;✅ Inventory tracking accuracy&#10;```&#10;&#10;**3. Sales Process Testing**&#10;```&#10;✅ Create invoice with customer&#10;✅ Add/remove products from invoice&#10;✅ Apply discounts and promotions&#10;✅ Generate PDF receipts&#10;✅ Inventory deduction verification&#10;```&#10;&#10;**4. Returns &amp; Exchange Testing**&#10;```&#10;✅ Create return within 30-day limit&#10;✅ Reject return outside time limit&#10;✅ Approval workflow testing&#10;✅ Inventory restoration verification&#10;✅ Refund processing&#10;```&#10;&#10;**5. Loyalty System Testing**&#10;```&#10;✅ Create loyalty cards&#10;✅ Point accumulation on purchases&#10;✅ Tier upgrade functionality&#10;✅ Point redemption process&#10;✅ Point history tracking&#10;```&#10;&#10;### **Database Testing**&#10;&#10;#### **Connection Testing**&#10;```bash&#10;# Test database connectivity&#10;mvn exec:java -Dexec.mainClass=&quot;main.Health&quot;&#10;&#10;# Expected output:&#10;# ✅ Kết nối JPA thành công!&#10;```&#10;&#10;#### **Data Integrity Testing**&#10;- **Foreign Key Constraints**: Verify referential integrity&#10;- **Data Validation**: Test business rule enforcement&#10;- **Transaction Rollback**: Test error handling and rollback&#10;- **Concurrent Access**: Test multi-user scenarios&#10;&#10;### **Performance Testing**&#10;&#10;#### **Load Testing Scenarios**&#10;- **Concurrent Users**: Test with multiple simultaneous users&#10;- **Large Datasets**: Test with thousands of products/customers&#10;- **Report Generation**: Test complex report performance&#10;- **Database Queries**: Monitor query execution times&#10;&#10;##  Deployment&#10;&#10;### **Production Deployment**&#10;&#10;#### **Server Requirements**&#10;- **OS**: Windows Server 2019+ or Linux (Ubuntu 20.04+)&#10;- **Java**: OpenJDK 21 or Oracle JDK 21&#10;- **Database**: SQL Server 2019+ (Standard or Enterprise)&#10;- **Memory**: 8GB RAM minimum (16GB recommended)&#10;- **Storage**: 50GB free space (SSD recommended)&#10;- **Network**: Stable internet connection for updates&#10;&#10;#### **Production Configuration**&#10;&#10;**1. Database Setup**&#10;```sql&#10;-- Create production database&#10;CREATE DATABASE QuanLyCuaHangQuanAo_Prod;&#10;&#10;-- Create dedicated user&#10;CREATE LOGIN qlch_user WITH PASSWORD = 'SecurePassword123!';&#10;USE QuanLyCuaHangQuanAo_Prod;&#10;CREATE USER qlch_user FOR LOGIN qlch_user;&#10;ALTER ROLE db_datareader ADD MEMBER qlch_user;&#10;ALTER ROLE db_datawriter ADD MEMBER qlch_user;&#10;```&#10;&#10;**2. Application Configuration**&#10;```xml&#10;&lt;!-- Production persistence.xml --&gt;&#10;&lt;property name=&quot;jakarta.persistence.jdbc.url&quot;&#10;          value=&quot;jdbc:sqlserver://prod-server:1433;databaseName=QuanLyCuaHangQuanAo_Prod;encrypt=true&quot;/&gt;&#10;&lt;property name=&quot;jakarta.persistence.jdbc.user&quot; value=&quot;qlch_user&quot;/&gt;&#10;&lt;property name=&quot;jakarta.persistence.jdbc.password&quot; value=&quot;SecurePassword123!&quot;/&gt;&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;```&#10;&#10;**3. Security Hardening**&#10;- Change all default passwords&#10;- Enable SQL Server encryption&#10;- Configure firewall rules&#10;- Set up SSL/TLS certificates&#10;- Enable audit logging&#10;- Regular security updates&#10;&#10;#### **Backup Strategy**&#10;```sql&#10;-- Daily full backup&#10;BACKUP DATABASE QuanLyCuaHangQuanAo_Prod&#10;TO DISK = 'C:\Backups\QLCH_Full_YYYYMMDD.bak'&#10;WITH COMPRESSION, CHECKSUM;&#10;&#10;-- Hourly transaction log backup&#10;BACKUP LOG QuanLyCuaHangQuanAo_Prod&#10;TO DISK = 'C:\Backups\QLCH_Log_YYYYMMDD_HH.trn';&#10;```&#10;&#10;### **Monitoring &amp; Maintenance**&#10;&#10;#### **Application Monitoring**&#10;- **Log Monitoring**: Monitor application logs for errors&#10;- **Performance Metrics**: Track response times and throughput&#10;- **Database Monitoring**: Monitor SQL Server performance&#10;- **Disk Space**: Monitor storage usage&#10;- **Memory Usage**: Track JVM memory consumption&#10;&#10;#### **Regular Maintenance Tasks**&#10;- **Database Maintenance**: Update statistics, rebuild indexes&#10;- **Log Cleanup**: Archive and clean old log files&#10;- **Security Updates**: Apply Java and SQL Server updates&#10;- **Backup Verification**: Test backup restoration procedures&#10;- **Performance Tuning**: Optimize slow queries and operations&#10;&#10;##  Contributing&#10;&#10;### **Development Guidelines**&#10;&#10;#### **Code Standards**&#10;- **Java Conventions**: Follow Oracle Java coding standards&#10;- **Naming**: Use descriptive Vietnamese names for business entities&#10;- **Documentation**: Comment complex business logic&#10;- **Error Handling**: Comprehensive exception handling&#10;- **Logging**: Appropriate logging levels and messages&#10;&#10;#### **Architecture Principles**&#10;- **Clean Architecture**: Maintain clear layer separation&#10;- **SOLID Principles**: Follow all five SOLID principles&#10;- **Design Patterns**: Use appropriate design patterns&#10;- **Dependency Injection**: Use the custom DI container&#10;- **Validation**: Validate at all appropriate layers&#10;&#10;#### **Database Guidelines**&#10;- **Naming**: Use Vietnamese names for tables and columns&#10;- **Constraints**: Define appropriate constraints and indexes&#10;- **Relationships**: Maintain referential integrity&#10;- **Performance**: Consider query performance in design&#10;- **Documentation**: Document complex business rules&#10;&#10;### **Contribution Process**&#10;&#10;#### **Setting Up Development Environment**&#10;1. **Fork Repository**: Create your own fork&#10;2. **Clone Locally**: Clone to your development machine&#10;3. **Setup Database**: Create local development database&#10;4. **Run Tests**: Ensure all tests pass&#10;5. **Create Branch**: Create feature branch for your work&#10;&#10;#### **Making Changes**&#10;1. **Follow Standards**: Adhere to coding standards&#10;2. **Write Tests**: Add tests for new functionality&#10;3. **Update Documentation**: Update README if needed&#10;4. **Test Thoroughly**: Test all affected functionality&#10;5. **Commit Changes**: Use descriptive commit messages&#10;&#10;#### **Submitting Changes**&#10;1. **Create Pull Request**: Submit PR with clear description&#10;2. **Code Review**: Address review feedback&#10;3. **Testing**: Ensure CI tests pass&#10;4. **Documentation**: Update any relevant documentation&#10;5. **Merge**: Maintainer will merge approved changes&#10;&#10;### **Reporting Issues**&#10;&#10;#### **Bug Reports**&#10;Include the following information:&#10;- **Environment**: OS, Java version, database version&#10;- **Steps to Reproduce**: Clear reproduction steps&#10;- **Expected Behavior**: What should happen&#10;- **Actual Behavior**: What actually happens&#10;- **Screenshots**: If applicable&#10;- **Logs**: Relevant error logs&#10;&#10;#### **Feature Requests**&#10;- **Use Case**: Describe the business need&#10;- **Proposed Solution**: Suggest implementation approach&#10;- **Alternatives**: Consider alternative solutions&#10;- **Impact**: Assess impact on existing functionality&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;### **MIT License Summary**&#10;- ✅ **Commercial Use**: Can be used commercially&#10;- ✅ **Modification**: Can be modified and distributed&#10;- ✅ **Distribution**: Can be distributed freely&#10;- ✅ **Private Use**: Can be used privately&#10;- ❌ **Liability**: No warranty or liability&#10;- ❌ **Warranty**: No warranty provided&#10;&#10;##  Troubleshooting&#10;&#10;### **Common Issues**&#10;&#10;#### **Database Connection Issues**&#10;&#10;**Problem**: Cannot connect to SQL Server&#10;```&#10;❌ Lỗi kết nối JPA: Connection refused&#10;```&#10;&#10;**Solutions**:&#10;1. **Check SQL Server Service**: Ensure SQL Server is running&#10;2. **Verify Connection String**: Check server name and port&#10;3. **Authentication**: Verify username and password&#10;4. **Firewall**: Check Windows Firewall settings&#10;5. **SQL Server Configuration**: Enable TCP/IP protocol&#10;&#10;```bash&#10;# Test connection manually&#10;sqlcmd -S localhost -U sa -P your_password&#10;```&#10;&#10;#### **Application Startup Issues**&#10;&#10;**Problem**: Application fails to start&#10;```&#10;❌ Failed to initialize application&#10;```&#10;&#10;**Solutions**:&#10;1. **Java Version**: Ensure Java 21 is installed&#10;2. **Dependencies**: Run `mvn clean install`&#10;3. **Database**: Verify database is accessible&#10;4. **Configuration**: Check persistence.xml settings&#10;5. **Logs**: Review application logs for specific errors&#10;&#10;#### **Login Issues**&#10;&#10;**Problem**: Cannot login with default credentials&#10;&#10;**Solutions**:&#10;1. **Database Data**: Verify user accounts exist in database&#10;2. **Password Hashing**: Check if passwords are properly hashed&#10;3. **Case Sensitivity**: Ensure correct case for username&#10;4. **Account Status**: Verify account is active&#10;&#10;```sql&#10;-- Check user accounts&#10;SELECT TenDangNhap, Quyen, TrangThai FROM TaiKhoan;&#10;```&#10;&#10;#### **Performance Issues**&#10;&#10;**Problem**: Application runs slowly&#10;&#10;**Solutions**:&#10;1. **Database Indexes**: Ensure proper indexing&#10;2. **Connection Pool**: Optimize HikariCP settings&#10;3. **JVM Memory**: Increase heap size if needed&#10;4. **Query Optimization**: Review slow queries&#10;5. **Hardware**: Check CPU and memory usage&#10;&#10;```bash&#10;# Increase JVM memory&#10;java -Xms1g -Xmx4g -jar QLCHQuanAo-1.0-SNAPSHOT.jar&#10;```&#10;&#10;#### **PDF Generation Issues**&#10;&#10;**Problem**: Cannot generate PDF receipts&#10;&#10;**Solutions**:&#10;1. **Font Installation**: Ensure Vietnamese fonts are available&#10;2. **File Permissions**: Check write permissions for temp directory&#10;3. **iText Dependencies**: Verify iText libraries are included&#10;4. **Memory**: Ensure sufficient memory for PDF generation&#10;&#10;### **Getting Help**&#10;&#10;#### **Documentation**&#10;- **README**: This comprehensive guide&#10;- **Code Comments**: Inline documentation in source code&#10;- **Database Schema**: ERD and table documentation&#10;- **API Documentation**: Service and controller documentation&#10;&#10;#### **Support Channels**&#10;- **GitHub Issues**: Report bugs and request features&#10;- **Code Review**: Submit pull requests for review&#10;- **Documentation**: Contribute to documentation improvements&#10;&#10;#### **Debugging Tips**&#10;&#10;**Enable Debug Logging**:&#10;```xml&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;```&#10;&#10;**Check Application Logs**:&#10;```java&#10;// Look for these log patterns&#10;INFO: Application started successfully&#10;WARNING: Validation failed&#10;SEVERE: Database connection failed&#10;```&#10;&#10;**Database Debugging**:&#10;```sql&#10;-- Check table contents&#10;SELECT COUNT(*) FROM SanPham;&#10;SELECT COUNT(*) FROM TaiKhoan;&#10;SELECT COUNT(*) FROM HoaDon;&#10;&#10;-- Check recent activity&#10;SELECT TOP 10 * FROM HoaDon ORDER BY NgayLap DESC;&#10;```&#10;&#10;---&#10;&#10;##  Conclusion&#10;&#10;The **Quản Lý Cửa Hàng Quần Áo** system represents a comprehensive, enterprise-grade solution for clothing retail management. Built with modern Java technologies and following clean architecture principles, it provides a robust foundation for retail operations while maintaining flexibility for future enhancements.&#10;&#10;### **Key Achievements**&#10;- ✅ **Complete Business Solution**: End-to-end retail management&#10;- ✅ **Modern Architecture**: Clean, maintainable, and scalable design&#10;- ✅ **Security First**: Enterprise-grade security implementation&#10;- ✅ **User-Friendly**: Intuitive interface with role-based access&#10;- ✅ **Comprehensive Features**: From basic sales to advanced analytics&#10;- ✅ **Vietnamese Localization**: Fully localized for Vietnamese market&#10;&#10;### **Future Enhancements**&#10;-  **Web Interface**: Browser-based access&#10;-  **Mobile App**: Mobile point-of-sale application&#10;-  **API Integration**: REST API for third-party integrations&#10;-  **Advanced Analytics**: Machine learning for sales predictions&#10;-  **Multi-Store Support**: Support for multiple store locations&#10;-  **E-commerce Integration**: Online store connectivity&#10;&#10;**Happy Coding! **&#10;&#10;" />
              <option name="updatedContent" value="#  Quản Lý Cửa Hàng Quần Áo (Clothing Store Management System)&#10;&#10;[![Java](https://img.shields.io/badge/Java-21-orange.svg)](https://www.oracle.com/java/)&#10;[![JPA](https://img.shields.io/badge/JPA-3.2.0-blue.svg)](https://jakarta.ee/specifications/persistence/)&#10;[![Hibernate](https://img.shields.io/badge/Hibernate-7.0.8-green.svg)](https://hibernate.org/)&#10;[![Maven](https://img.shields.io/badge/Maven-3.8+-red.svg)](https://maven.apache.org/)&#10;[![SQL Server](https://img.shields.io/badge/SQL%20Server-2019+-blue.svg)](https://www.microsoft.com/en-us/sql-server/)&#10;[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)&#10;&#10;##  Table of Contents&#10;&#10;- [Overview](#overview)&#10;- [️ Architecture](#architecture)&#10;- [ Design Patterns](#design-patterns)&#10;- [✨ Core Features](#core-features)&#10;- [ Advanced Features](#advanced-features)&#10;- [ Project Structure](#project-structure)&#10;- [⚙️ Setup &amp; Installation](#setup--installation)&#10;- [ Configuration](#configuration)&#10;- [ Database Schema](#database-schema)&#10;- [ User Interface](#user-interface)&#10;- [ Security &amp; Authentication](#security--authentication)&#10;- [ Usage Guide](#usage-guide)&#10;- [ Testing](#testing)&#10;- [ Deployment](#deployment)&#10;- [ Contributing](#contributing)&#10;- [ License](#license)&#10;- [ Troubleshooting](#troubleshooting)&#10;&#10;## Overview&#10;&#10;**Quản Lý Cửa Hàng Quần Áo** is a comprehensive, enterprise-grade clothing store management system built with modern Java technologies and clean architecture principles. This application provides end-to-end solutions for retail clothing businesses, from inventory management to customer loyalty programs.&#10;&#10;###  **Key Highlights**&#10;- **Clean Architecture** implementation with clear separation of concerns&#10;- **Role-Based Access Control (RBAC)** with 3-tier permission system&#10;- **Advanced Features**: Returns/Exchanges, Loyalty Cards, Supplier Management, Reporting&#10;- **Modern Tech Stack**: Java 21, JPA 3.2, Hibernate 7.0, SQL Server&#10;- **Professional Design Patterns**: 8 Gang of Four patterns implemented&#10;- **Enterprise Security**: BCrypt password hashing, session management&#10;- **PDF Generation**: Automated invoice and receipt generation&#10;- **Vietnamese Language Support**: Full localization for Vietnamese market&#10;&#10;## ️ Architecture&#10;&#10;### **Clean Architecture Implementation**&#10;&#10;The application follows **Clean Architecture** principles with clear separation of concerns across multiple layers:&#10;&#10;```&#10;┌─────────────────────────────────────────────────────────┐&#10;│                    Presentation Layer                   │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │   Swing UI      │───▶│      Controllers            │ │&#10;│  │   Components    │    │   (UI-Service Bridge)       │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                  Business Logic Layer                   │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │    Services     │───▶│       Validators            │ │&#10;│  │ (Business Logic)│    │   (Business Rules)          │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                  Data Access Layer                      │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │  DAO Interfaces │───▶│    DAO Implementations      │ │&#10;│  │   (Contracts)   │    │     (Data Access)           │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                    Infrastructure Layer                 │&#10;│  ┌─────────────────┐    ┌─────────────────────────────┐ │&#10;│  │  DI Container   │    │   EntityManager Utility     │ │&#10;│  │   Exception     │    │     Database Config         │ │&#10;│  │   Framework     │    │     Session Management      │ │&#10;│  └─────────────────┘    └─────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;                                  │&#10;                                  ▼&#10;┌─────────────────────────────────────────────────────────┐&#10;│                      Domain Layer                       │&#10;│  ┌──────���──────────────────────────────────────────────┐ │&#10;│  │              JPA Entities (Domain Models)           │ │&#10;│  │   SanPham │ TaiKhoan │ NhanVien │ HoaDon │ etc.    │ │&#10;│  └─────────────────────────────────────────────────────┘ │&#10;└─────────────────────────────────────────────────────────┘&#10;```&#10;&#10;##  Design Patterns&#10;&#10;This project implements **8 professional design patterns** following Gang of Four and enterprise patterns:&#10;&#10;### **1.  Singleton Pattern**&#10;**Implementation**: `ServiceContainer`, `EntityManagerUtil`, `SessionManager`&#10;&#10;```java&#10;public class ServiceContainer {&#10;    private static ServiceContainer instance;&#10;    &#10;    public static synchronized ServiceContainer getInstance() {&#10;        if (instance == null) {&#10;            instance = new ServiceContainer();&#10;        }&#10;        return instance;&#10;    }&#10;}&#10;```&#10;&#10;### **2.  Template Method Pattern**&#10;**Implementation**: `BaseDAO&lt;T, ID&gt;` abstract class&#10;&#10;```java&#10;public abstract class BaseDAO&lt;T, ID&gt; {&#10;    // Template method defining algorithm structure&#10;    public void insert(T entity) {&#10;        validateEntity(entity);  // Hook method&#10;        EntityManagerUtil.executeInTransaction(em -&gt; {&#10;            em.persist(entity);&#10;        });&#10;    }&#10;    &#10;    // Hook method for subclasses to override&#10;    protected void validateEntity(T entity) {&#10;        // Default validation&#10;    }&#10;}&#10;```&#10;&#10;### **3.  Strategy Pattern**&#10;**Implementation**: `Validator&lt;T&gt;` interface with multiple implementations&#10;&#10;```java&#10;public interface Validator&lt;T&gt; {&#10;    ValidationResult validate(T object);&#10;}&#10;&#10;public class SanPhamValidator implements Validator&lt;SanPham&gt; {&#10;    public ValidationResult validate(SanPham product) {&#10;        // Product-specific validation logic&#10;    }&#10;}&#10;```&#10;&#10;### **4.  Factory Pattern**&#10;**Implementation**: `ApplicationConfig` for service creation&#10;&#10;```java&#10;public class ApplicationConfig {&#10;    private static void registerServices(ServiceContainer container) {&#10;        container.registerSingletonFactory(ISanPhamService.class, () -&gt; {&#10;            ISanPhamDAO dao = container.getService(ISanPhamDAO.class);&#10;            return new SanPhamServiceImpl(dao);&#10;        });&#10;    }&#10;}&#10;```&#10;&#10;### **5.  Repository Pattern**&#10;**Implementation**: DAO layer with interfaces and implementations&#10;&#10;```java&#10;public interface ISanPhamDAO {&#10;    void insert(SanPham sp);&#10;    Optional&lt;SanPham&gt; findById(int id);&#10;    List&lt;SanPham&gt; findAll();&#10;}&#10;&#10;public class SanPhamDAO extends BaseDAO&lt;SanPham, Integer&gt; implements ISanPhamDAO {&#10;    // Repository implementation&#10;}&#10;```&#10;&#10;### **6.  Dependency Injection Pattern**&#10;**Implementation**: Custom DI container with lifecycle management&#10;&#10;```java&#10;// Registration&#10;container.registerSingleton(ISanPhamDAO.class, new SanPhamDAO());&#10;&#10;// Injection&#10;public class SanPhamController {&#10;    private final ISanPhamService service;&#10;    &#10;    public SanPhamController() {&#10;        this.service = ApplicationConfig.getService(ISanPhamService.class);&#10;    }&#10;}&#10;```&#10;&#10;### **7. ️ MVC (Model-View-Controller) Pattern**&#10;**Implementation**: Separation between UI, controllers, and models&#10;&#10;```java&#10;// Model (Domain)&#10;@Entity public class SanPham { /* JPA Entity */ }&#10;&#10;// View (Presentation)&#10;public class SanPhamUI extends JFrame { /* Swing UI */ }&#10;&#10;// Controller (Coordination)&#10;public class SanPhamController { /* UI-Service Bridge */ }&#10;```&#10;&#10;### **8.  Command Pattern**&#10;**Implementation**: Service methods as commands with validation and error handling&#10;&#10;```java&#10;public class SanPhamServiceImpl implements ISanPhamService {&#10;    public void createProduct(SanPham product) throws ValidationException, BusinessException {&#10;        // Validation Command&#10;        ValidationResult result = validator.validate(product);&#10;        if (!result.isValid()) {&#10;            throw new ValidationException(result.getErrors());&#10;        }&#10;        &#10;        // Business Logic Command&#10;        if (isProductNameExists(product.getName())) {&#10;            throw new BusinessException(&quot;Product name already exists&quot;);&#10;        }&#10;        &#10;        // Persistence Command&#10;        productDAO.insert(product);&#10;    }&#10;}&#10;```&#10;&#10;## ✅ SOLID Principles&#10;&#10;### **S - Single Responsibility Principle**&#10;✅ **Implemented**: Each class has one reason to change&#10;- **Controllers**: Only handle UI-Service communication&#10;- **Services**: Only contain business logic&#10;- **DAOs**: Only handle data access&#10;- **Validators**: Only handle validation logic&#10;&#10;### **O - Open/Closed Principle**&#10;✅ **Implemented**: Open for extension, closed for modification&#10;- `BaseDAO` can be extended without modification&#10;- New validators can be added without changing existing code&#10;- Service interfaces allow new implementations&#10;&#10;### **L - Liskov Substitution Principle**&#10;✅ **Implemented**: Derived classes are substitutable for base classes&#10;- All DAO implementations are interchangeable through interfaces&#10;- Service implementations follow their contracts exactly&#10;&#10;### **I - Interface Segregation Principle**&#10;✅ **Implemented**: Clients depend only on interfaces they use&#10;- Focused interfaces: `ISanPhamDAO`, `ITaiKhoanDAO`, etc.&#10;- No fat interfaces with unused methods&#10;&#10;### **D - Dependency Inversion Principle**&#10;✅ **Implemented**: Depend on abstractions, not concretions&#10;- High-level modules depend on interfaces&#10;- Dependencies injected through constructor&#10;- Easy to swap implementations&#10;&#10;## ✨ Core Features&#10;&#10;### ** User &amp; Employee Management**&#10;- **Multi-role authentication system** (Admin, Manager, Staff)&#10;- **Secure password hashing** with BCrypt encryption&#10;- **Session management** with automatic timeout and cleanup&#10;- **Role-based access control (RBAC)** with granular permissions&#10;- **Employee profile management** with comprehensive information tracking&#10;- **Work status monitoring** and employee performance tracking&#10;&#10;### ** Product &amp; Inventory Management**&#10;- **Complete product lifecycle management** (CRUD operations)&#10;- **Hierarchical category management** with unlimited depth&#10;- **Product variant management** (size, color, quantity, pricing)&#10;- **Advanced search and filtering** with Vietnamese language support&#10;- **Real-time inventory tracking** and stock level monitoring&#10;- **Low stock alerts** and automated reorder notifications&#10;- **Barcode support** for quick product identification&#10;&#10;### ** Sales &amp; Invoice Management**&#10;- **Comprehensive invoice creation and management**&#10;- **Multi-payment method support** (Cash, Card, Bank Transfer)&#10;- **Real-time inventory updates** during sales transactions&#10;- **Customer information management** with purchase history&#10;- **PDF invoice generation** with professional formatting&#10;- **Sales analytics** and performance tracking&#10;- **Discount and promotion application**&#10;&#10;### ** Security &amp; Authentication**&#10;- **Enterprise-grade authentication** with session management&#10;- **BCrypt password hashing** with salt for maximum security&#10;- **Role-based authorization** at UI, controller, and service levels&#10;- **Input validation and sanitization** across all layers&#10;- **SQL injection prevention** through parameterized queries&#10;- **Audit logging** for all critical operations&#10;&#10;##  Advanced Features&#10;&#10;### ** Returns &amp; Exchange System**&#10;- **Comprehensive return/exchange workflow** with approval process&#10;- **30-day return policy** with automatic validation&#10;- **Multi-step approval process** (Pending → Approved → Completed)&#10;- **Refund management** with multiple payment methods&#10;- **Return reason tracking** and analytics&#10;- **PDF return receipt generation**&#10;- **Inventory adjustment** upon return completion&#10;&#10;### ** Loyalty Card System**&#10;- **5-tier loyalty program**: Bronze, Silver, Gold, Platinum, Diamond&#10;- **Automatic point accumulation** based on purchase amount&#10;- **Tier-based benefits**: 1%-3% cashback, 0%-10% discounts&#10;- **Point redemption system** for future purchases&#10;- **Loyalty card management** with unique card numbers&#10;- **Point history tracking** and expiration management&#10;- **Customer tier upgrade** based on spending thresholds&#10;&#10;### ** Promotion &amp; Discount System**&#10;- **Multiple promotion types**: Percentage, Fixed Amount, Buy X Get Y&#10;- **Flexible promotion rules** with date ranges and conditions&#10;- **Automatic promotion application** based on cart contents&#10;- **Promotion code system** for targeted marketing&#10;- **Category and product-specific promotions**&#10;- **Customer group targeting** for personalized offers&#10;&#10;### ** Supplier &amp; Purchase Management**&#10;- **Comprehensive supplier database** with contact information&#10;- **Supplier performance tracking** with rating system&#10;- **Purchase order management** with approval workflow&#10;- **Delivery tracking** and receipt confirmation&#10;- **Supplier payment terms** and credit management&#10;- **Purchase analytics** and cost optimization&#10;&#10;### ** Advanced Reporting &amp; Analytics**&#10;- **Revenue analytics** with time-based comparisons&#10;- **Product performance reports** with sales trends&#10;- **Customer behavior analysis** and segmentation&#10;- **Inventory turnover reports** and optimization suggestions&#10;- **Employee performance tracking** and commission calculations&#10;- **Profit margin analysis** by product and category&#10;- **Export capabilities** to PDF and Excel formats&#10;&#10;### ** Payment Method Management**&#10;- **Multiple payment method support** (Cash, Credit Card, Bank Transfer, E-wallet)&#10;- **Payment method configuration** with fees and limits&#10;- **Transaction tracking** and reconciliation&#10;- **Split payment support** for large transactions&#10;- **Payment analytics** and processing fee optimization&#10;&#10;##  Project Structure&#10;&#10;```&#10;src/main/java/&#10;├──  config/&#10;│   └── ApplicationConfig.java          #  Factory pattern for DI setup&#10;├──  controller/&#10;│   ├── SanPhamController.java          #  Product management controller&#10;│   ├── TaiKhoanController.java         #  Account management controller&#10;│   ├── HoaDonController.java           #  Invoice operations controller&#10;│   ├── BienTheSanPhamController.java   #  Product variant controller&#10;│   ├── KhachHangController.java        #  Customer management controller&#10;│   ├── NhanVienController.java         #  Employee management controller&#10;│   ├── DanhMucController.java          #  Category management controller&#10;│   ├── MauSacController.java           #  Color management controller&#10;│   ├── KichThuocController.java        #  Size management controller&#10;│   └── ChiTietHoaDonController.java    #  Invoice detail controller&#10;├── ️ dao/&#10;│   ├── base/&#10;│   │   └── BaseDAO.java                #  Template Method pattern base class&#10;│   ├── interfaces/&#10;│   │   ├── ISanPhamDAO.java            #  Product data access interface&#10;│   │   ├── ITaiKhoanDAO.java           #  Account data access interface&#10;│   │   ├── IHoaDonDAO.java             #  Invoice data access interface&#10;│   │   ├── IBienTheSanPhamDAO.java     #  Product variant data access&#10;│   │   ├── IKhachHangDAO.java          #  Customer data access interface&#10;│   │   ├── INhanVienDAO.java           #  Employee data access interface&#10;│   │   ├── IDanhMucDAO.java            #  Category data access interface&#10;│   │   ├── IMauSacDAO.java             #  Color data access interface&#10;│   │   ├── IKichThuocDAO.java          #  Size data access interface&#10;│   │   ├── IChiTietHoaDonDAO.java      #  Invoice detail data access&#10;│   │   ├── IPhieuDoiTraDAO.java        #  Return/Exchange data access&#10;│   │   ├── ITheThanThietDAO.java       #  Loyalty card data access&#10;│   │   ├── INhaCungCapDAO.java         #  Supplier data access interface&#10;│   │   ├── IBaoCaoDAO.java             #  Report data access interface&#10;│   │   ├── IHinhThucThanhToanDAO.java  #  Payment method data access&#10;│   │   ├── ILichSuDiemDAO.java         #  Point history data access&#10;│   │   └── IChiTietPhieuDoiTraDAO.java #  Return detail data access&#10;│   └── impl/&#10;│       ├── SanPhamDAO.java             #  Product data implementation&#10;│       ├── TaiKhoanDAO.java            #  Account data implementation&#10;│       ├── HoaDonDAO.java              #  Invoice data implementation&#10;│       ├── BienTheSanPhamDAO.java      #  Product variant implementation&#10;│       ├── KhachHangDAO.java           #  Customer data implementation&#10;│       ├── NhanVienDAO.java            #  Employee data implementation&#10;│       ├── DanhMucDAO.java             #  Category data implementation&#10;│       ├── MauSacDAO.java              #  Color data implementation&#10;│       ├── KichThuocDAO.java           #  Size data implementation&#10;│       ├── ChiTietHoaDonDAO.java       #  Invoice detail implementation&#10;│       ├── PhieuDoiTraDAO.java         #  Return/Exchange implementation&#10;│       ├── TheThanThietDAO.java        #  Loyalty card implementation&#10;│       ├── NhaCungCapDAO.java          #  Supplier data implementation&#10;│       ├── BaoCaoDAO.java              #  Report data implementation&#10;│       ├── HinhThucThanhToanDAO.java   #  Payment method implementation&#10;│       ├── LichSuDiemDAO.java          #  Point history implementation&#10;│       └── ChiTietPhieuDoiTraDAO.java  #  Return detail implementation&#10;├──  di/&#10;│   └── ServiceContainer.java           #  Singleton DI container&#10;├── ⚠️ exception/&#10;│   ├── BusinessException.java          #  Business logic errors&#10;│   ├── DAOException.java              # ️ Data access errors&#10;│   └── ValidationException.java        # ✅ Validation errors&#10;├──  service/&#10;│   ├── interfaces/&#10;│   │   ├── ISanPhamService.java        #  Product business logic interface&#10;│   │   ├── ITaiKhoanService.java       #  Account business logic interface&#10;│   │   ├── IPhieuDoiTraService.java    #  Return/Exchange business logic&#10;│   │   └── IBaoCaoService.java         #  Report business logic interface&#10;│   └── impl/&#10;│       ├── SanPhamServiceImpl.java     #  Product service implementation&#10;│       ├── TaiKhoanServiceImpl.java    #  Account service implementation&#10;│       ├── PhieuDoiTraServiceImpl.java #  Return/Exchange implementation&#10;│       └── BaoCaoServiceImpl.java      #  Report service implementation&#10;├── ️ util/&#10;│   ├── EntityManagerUtil.java          #  JPA EntityManager management&#10;│   ├── SessionManager.java             #  User session management&#10;│   ├── RoleManager.java                #  Role-based access control&#10;│   ├── PasswordUtils.java              #  BCrypt password utilities&#10;│   ├── PDFInvoiceGenerator.java        #  Invoice PDF generation&#10;│   ├── PDFPhieuDoiTraGenerator.java    #  Return receipt PDF generation&#10;│   ├── FontDownloader.java             #  Vietnamese font support&#10;│   └── DatabaseTestUtil.java           #  Database testing utilities&#10;├── ✅ validation/&#10;│   ├── Validator.java                  #  Strategy pattern interface&#10;│   ├── ValidationResult.java           #  Validation response wrapper&#10;│   ├── SanPhamValidator.java          #  Product validation logic&#10;│   └── TaiKhoanValidator.java         #  Account validation logic&#10;├──  view/&#10;│   ├── BaseAuthenticatedUI.java        #  Base UI with authentication&#10;│   ├── LoginUI.java                    #  Login interface&#10;│   ├── MainMenuUI.java                 #  Main dashboard with role-based menu&#10;│   ├── SanPhamUI.java                  #  Product management interface&#10;│   ├── TaiKhoanUI.java                 #  Account management interface&#10;│   ├── HoaDonUI.java                   #  Invoice management interface&#10;│   ├── BienTheSanPhamUI.java           #  Product variant management&#10;│   ├── KhachHangUI.java                #  Customer management interface&#10;│   ├── NhanVienUI.java                 #  Employee management interface&#10;│   ├── DanhMucUI.java                  #  Category management interface&#10;│   ├── MauSacUI.java                   #  Color management interface&#10;│   ├── KichThuocUI.java                #  Size management interface&#10;│   ├── PhieuDoiTraUI.java              #  Return/Exchange management&#10;│   ├── TheThanThietUI.java             #  Loyalty card management&#10;│   ├── NhaCungCapUI.java               #  Supplier management interface&#10;│   ├── BaoCaoUI.java                   #  Report and analytics interface&#10;│   ├── HinhThucThanhToanUI.java        #  Payment method management&#10;│   ├── ChiTietHoaDonDialog.java        #  Invoice detail dialog&#10;│   ├── ThemSanPhamDialog.java          # ➕ Add product dialog&#10;│   ├── ThemPhieuDoiTraDialog.java      # ➕ Add return/exchange dialog&#10;│   ├── PhieuDoiTraDetailUI.java        #  Return detail view&#10;│   ├── PhieuDoiTraFormUI.java          #  Return form interface&#10;│   ├── PhieuDoiTraCompleteUI.java      # ✅ Return completion interface&#10;│   ├── PhieuDoiTraUINew.java           #  Enhanced return interface&#10;│   └── DoiTraWorkflowDiagram.java      #  Return workflow visualization&#10;├──  model/&#10;│   ├── SanPham.java                    #  Product entity&#10;│   ├── TaiKhoan.java                   #  Account entity&#10;│   ├── NhanVien.java                   #  Employee entity&#10;│   ├── HoaDon.java                     #  Invoice entity&#10;│   ├── BienTheSanPham.java             #  Product variant entity&#10;│   ├── ChiTietHoaDon.java              #  Invoice detail entity&#10;│   ├── KhachHang.java                  #  Customer entity&#10;│   ├── DanhMuc.java                    #  Category entity&#10;│   ├── MauSac.java                     #  Color entity&#10;│   ├── KichThuoc.java                  #  Size entity&#10;│   ├── PhieuDoiTra.java                #  Return/Exchange entity&#10;│   ├── ChiTietPhieuDoiTra.java         #  Return detail entity&#10;│   ├── TheThanThiet.java               #  Loyalty card entity&#10;│   ├── LichSuDiem.java                 #  Point history entity&#10;│   ├── NhaCungCap.java                 #  Supplier entity&#10;│   ├── DonDatHang.java                 #  Purchase order entity&#10;│   ├── ChiTietDatHang.java             #  Purchase order detail entity&#10;│   ├── ChuongTrinhKhuyenMai.java       #  Promotion program entity&#10;│   ├── HinhThucThanhToan.java          #  Payment method entity&#10;│   ├── BaoCao.java                     #  Report entity&#10;│   ├── ThongKeDoanhThu.java            #  Revenue statistics entity&#10;│   ├── ThongKeSanPham.java             #  Product statistics entity&#10;│   ├── ChiTietHoaDonId.java            #  Invoice detail composite key&#10;│   ├── ChiTietPhieuDoiTraId.java       #  Return detail composite key&#10;│   └── ChiTietDatHangId.java           #  Purchase detail composite key&#10;└──  main/&#10;    ├── Main.java                       #  Application entry point&#10;    └── Health.java                     #  Database health check utility&#10;```&#10;&#10;## ⚙️ Setup &amp; Installation&#10;&#10;### ** Prerequisites**&#10;&#10;#### **System Requirements**&#10;- **Java 21** or higher (OpenJDK or Oracle JDK)&#10;- **Maven 3.8+** for dependency management&#10;- **SQL Server 2019+** (Express, Standard, or Enterprise)&#10;- **4GB RAM minimum** (8GB recommended)&#10;- **2GB free disk space** for application and database&#10;&#10;#### **Development Environment**&#10;- **IDE**: IntelliJ IDEA (recommended), Eclipse, or VS Code with Java extensions&#10;- **Git** for version control&#10;- **SQL Server Management Studio (SSMS)** for database management (optional)&#10;&#10;### ** Installation Steps**&#10;&#10;#### **1. Clone the Repository**&#10;```bash&#10;git clone https://github.com/Mew-Kyu/ASM-Java-UIT.git&#10;cd ASM-Java-UIT&#10;```&#10;&#10;#### **2. Database Setup**&#10;&#10;**Option A: Automatic Setup (Recommended)**&#10;```bash&#10;# Run the provided SQL script (handles database creation automatically)&#10;sqlcmd -S localhost -E -i script.sql&#10;```&#10;&#10;**Option B: Manual Setup**&#10;```sql&#10;-- Connect to SQL Server and create database&#10;CREATE DATABASE QuanLyCuaHangQuanAo;&#10;GO&#10;&#10;-- Run the script.sql file to create tables and seed data&#10;USE QuanLyCuaHangQuanAo;&#10;-- Execute script.sql content&#10;```&#10;&#10;#### **3. Database Configuration**&#10;&#10;Edit `src/main/resources/META-INF/persistence.xml`:&#10;&#10;```xml&#10;&lt;properties&gt;&#10;    &lt;!-- Database Connection --&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.url&quot;&#10;              value=&quot;jdbc:sqlserver://localhost:1433;databaseName=QuanLyCuaHangQuanAo;trustServerCertificate=true&quot;/&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.user&quot; value=&quot;sa&quot;/&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.password&quot; value=&quot;your_password&quot;/&gt;&#10;    &lt;property name=&quot;jakarta.persistence.jdbc.driver&quot; value=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;/&gt;&#10;&#10;    &lt;!-- Hibernate Configuration --&gt;&#10;    &lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.SQLServerDialect&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;&#10;    &lt;!-- Connection Pool (HikariCP) --&gt;&#10;    &lt;property name=&quot;hibernate.connection.provider_class&quot;&#10;              value=&quot;org.hibernate.hikaricp.internal.HikariCPConnectionProvider&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hikari.minimumIdle&quot; value=&quot;3&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hikari.maximumPoolSize&quot; value=&quot;10&quot;/&gt;&#10;    &lt;property name=&quot;hibernate.hikari.connectionTimeout&quot; value=&quot;30000&quot;/&gt;&#10;&lt;/properties&gt;&#10;```&#10;&#10;#### **4. Build the Project**&#10;```bash&#10;# Clean and compile&#10;mvn clean compile&#10;&#10;# Run tests (optional)&#10;mvn test&#10;&#10;# Package the application&#10;mvn package&#10;```&#10;&#10;#### **5. Database Health Check**&#10;```bash&#10;# Test database connection&#10;mvn exec:java -Dexec.mainClass=&quot;main.Health&quot;&#10;```&#10;&#10;#### **6. Run the Application**&#10;```bash&#10;# Start the application&#10;mvn exec:java -Dexec.mainClass=&quot;main.Main&quot;&#10;&#10;# Alternative: Run from IDE&#10;# Open Main.java and run the main method&#10;```&#10;&#10;```&#10;&#10;### ** IDE Setup**&#10;&#10;#### **IntelliJ IDEA Configuration**&#10;1. **Import Project**: File → Open → Select project folder&#10;2. **Set JDK**: File → Project Structure → Project → SDK → Java 21&#10;3. **Maven Configuration**: Enable auto-import in Maven settings&#10;4. **Database Connection**: Add SQL Server data source in Database tool window&#10;5. **Run Configuration**: Create new Application configuration with main class `main.Main`&#10;&#10;#### **Eclipse Configuration**&#10;1. **Import Project**: File → Import → Existing Maven Projects&#10;2. **Set JRE**: Right-click project → Properties → Java Build Path → Libraries → Modulepath → JRE&#10;3. **Maven Integration**: Right-click project → Maven → Reload Projects&#10;&#10;##  Configuration&#10;&#10;### **Database Configuration**&#10;&#10;#### **Connection Pool Settings (HikariCP)**&#10;The application uses **HikariCP** for high-performance connection pooling:&#10;&#10;```xml&#10;&lt;!-- HikariCP Configuration --&gt;&#10;&lt;property name=&quot;hibernate.connection.provider_class&quot;&#10;          value=&quot;org.hibernate.hikaricp.internal.HikariCPConnectionProvider&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.minimumIdle&quot; value=&quot;3&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.maximumPoolSize&quot; value=&quot;10&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.connectionTimeout&quot; value=&quot;30000&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.idleTimeout&quot; value=&quot;600000&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.maxLifetime&quot; value=&quot;1800000&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hikari.leakDetectionThreshold&quot; value=&quot;60000&quot;/&gt;&#10;```&#10;&#10;#### **JPA/Hibernate Settings**&#10;```xml&#10;&lt;!-- Hibernate Configuration --&gt;&#10;&lt;property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.SQLServerDialect&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.use_sql_comments&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.jdbc.batch_size&quot; value=&quot;20&quot;/&gt;&#10;&lt;property name=&quot;hibernate.order_inserts&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.order_updates&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.jdbc.batch_versioned_data&quot; value=&quot;true&quot;/&gt;&#10;```&#10;&#10;### **Application Configuration**&#10;&#10;#### **Dependency Injection Setup**&#10;The application uses a custom DI container configured in `ApplicationConfig.java`:&#10;&#10;```java&#10;// Service Registration Example&#10;container.registerSingletonFactory(ISanPhamService.class, () -&gt; {&#10;    ISanPhamDAO sanPhamDAO = container.getService(ISanPhamDAO.class);&#10;    IDanhMucDAO danhMucDAO = container.getService(IDanhMucDAO.class);&#10;    return new SanPhamServiceImpl(sanPhamDAO, danhMucDAO);&#10;});&#10;```&#10;&#10;#### **Logging Configuration**&#10;Comprehensive logging using `java.util.logging`:&#10;&#10;```java&#10;// Logging Levels:&#10;// - INFO: Application lifecycle events, user actions&#10;// - FINE: Business operations, service calls&#10;// - WARNING: Recoverable errors, validation failures&#10;// - SEVERE: Critical errors, system failures&#10;&#10;// Example Logger Usage&#10;private static final Logger LOGGER = Logger.getLogger(ClassName.class.getName());&#10;LOGGER.info(&quot;User logged in: &quot; + username);&#10;LOGGER.warning(&quot;Validation failed for product: &quot; + productName);&#10;LOGGER.severe(&quot;Database connection failed: &quot; + e.getMessage());&#10;```&#10;&#10;### **Security Configuration**&#10;&#10;#### **Password Security**&#10;- **Algorithm**: BCrypt with automatic salt generation&#10;- **Rounds**: 12 (configurable for security vs performance)&#10;- **Validation**: Minimum 8 characters, complexity requirements&#10;&#10;```java&#10;// Password Hashing Example&#10;String hashedPassword = PasswordUtils.hashPassword(plainPassword);&#10;boolean isValid = PasswordUtils.checkPassword(plainPassword, hashedPassword);&#10;```&#10;&#10;#### **Session Management**&#10;- **Session Timeout**: 30 minutes of inactivity (configurable)&#10;- **Automatic Cleanup**: Sessions cleaned on logout or timeout&#10;- **Security**: Session data stored in memory, not persisted&#10;&#10;#### **Role-Based Access Control**&#10;- **Roles**: ADMIN, MANAGER, STAFF with hierarchical permissions&#10;- **Enforcement**: UI, Controller, and Service layer validation&#10;- **Granular Permissions**: Feature-specific access control&#10;&#10;### **Performance Configuration**&#10;&#10;#### **JVM Tuning**&#10;Recommended JVM settings for production:&#10;&#10;```bash&#10;java -Xms512m -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 \&#10;     -XX:+UseStringDeduplication -XX:+OptimizeStringConcat \&#10;     -Dfile.encoding=UTF-8 -Duser.timezone=Asia/Ho_Chi_Minh \&#10;     -jar QLCHQuanAo-1.0-SNAPSHOT.jar&#10;```&#10;&#10;#### **Database Optimization**&#10;- **Indexing**: Automatic indexes on foreign keys and frequently queried columns&#10;- **Query Optimization**: Use of JPA fetch strategies and query hints&#10;- **Connection Pooling**: Optimized pool size based on concurrent users&#10;&#10;### **Environment-Specific Configuration**&#10;&#10;#### **Development Environment**&#10;```xml&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot;/&gt;&#10;```&#10;&#10;#### **Production Environment**&#10;```xml&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;&lt;property name=&quot;hibernate.jdbc.batch_size&quot; value=&quot;50&quot;/&gt;&#10;```&#10;&#10;### **Internationalization (i18n)**&#10;- **Primary Language**: Vietnamese (vi_VN)&#10;- **Character Encoding**: UTF-8 throughout the application&#10;- **Date/Time Format**: Vietnamese locale standards&#10;- **Currency**: Vietnamese Dong (VNĐ) formatting&#10;&#10;##  Database Schema&#10;&#10;### **Core Entities**&#10;&#10;#### **Product Management**&#10;```sql&#10;-- Categories (Danh Mục)&#10;DanhMuc (&#10;    MaDM INT PRIMARY KEY IDENTITY,&#10;    TenDM NVARCHAR(100) NOT NULL,&#10;    MoTa NVARCHAR(500),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Products (Sản Phẩm)&#10;SanPham (&#10;    MaSP INT PRIMARY KEY IDENTITY,&#10;    TenSP NVARCHAR(200) NOT NULL,&#10;    MaDM INT FOREIGN KEY REFERENCES DanhMuc(MaDM),&#10;    MoTa NVARCHAR(1000),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Colors (Màu Sắc)&#10;MauSac (&#10;    MaMau INT PRIMARY KEY IDENTITY,&#10;    TenMau NVARCHAR(50) NOT NULL,&#10;    MaHex VARCHAR(7),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Sizes (Kích Thước)&#10;KichThuoc (&#10;    MaSize INT PRIMARY KEY IDENTITY,&#10;    TenSize NVARCHAR(20) NOT NULL,&#10;    MoTa NVARCHAR(100),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Product Variants (Biến Thể Sản Phẩm)&#10;BienTheSanPham (&#10;    MaBienThe INT PRIMARY KEY IDENTITY,&#10;    MaSP INT FOREIGN KEY REFERENCES SanPham(MaSP),&#10;    MaMau INT FOREIGN KEY REFERENCES MauSac(MaMau),&#10;    MaSize INT FOREIGN KEY REFERENCES KichThuoc(MaSize),&#10;    SoLuong INT NOT NULL DEFAULT 0,&#10;    GiaBan DECIMAL(18,2) NOT NULL,&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;```&#10;&#10;#### **User Management**&#10;```sql&#10;-- Employees (Nhân Viên)&#10;NhanVien (&#10;    MaNV INT PRIMARY KEY IDENTITY,&#10;    HoTen NVARCHAR(100) NOT NULL,&#10;    NgaySinh DATE,&#10;    GioiTinh NVARCHAR(10),&#10;    DienThoai VARCHAR(20),&#10;    Email VARCHAR(100),&#10;    DiaChi NVARCHAR(300),&#10;    NgayVaoLam DATE DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Accounts (Tài Khoản)&#10;TaiKhoan (&#10;    TenDangNhap VARCHAR(50) PRIMARY KEY,&#10;    MatKhau VARCHAR(100) NOT NULL,&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    Quyen VARCHAR(20) NOT NULL CHECK (Quyen IN ('ADMIN', 'MANAGER', 'STAFF')),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Customers (Khách Hàng)&#10;KhachHang (&#10;    MaKH INT PRIMARY KEY IDENTITY,&#10;    HoTen NVARCHAR(100) NOT NULL,&#10;    DienThoai VARCHAR(20),&#10;    Email VARCHAR(100),&#10;    DiaChi NVARCHAR(300),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;```&#10;&#10;#### **Sales Management**&#10;```sql&#10;-- Invoices (Hóa Đơn)&#10;HoaDon (&#10;    MaHD INT PRIMARY KEY IDENTITY,&#10;    MaKH INT FOREIGN KEY REFERENCES KhachHang(MaKH),&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    NgayLap DATE DEFAULT GETDATE(),&#10;    TongTien DECIMAL(18,2) NOT NULL DEFAULT 0,&#10;    TrangThai NVARCHAR(20) DEFAULT 'COMPLETED'&#10;)&#10;&#10;-- Invoice Details (Chi Tiết Hóa Đơn)&#10;ChiTietHoaDon (&#10;    MaHD INT FOREIGN KEY REFERENCES HoaDon(MaHD),&#10;    MaBienThe INT FOREIGN KEY REFERENCES BienTheSanPham(MaBienThe),&#10;    SoLuong INT NOT NULL,&#10;    GiaBan DECIMAL(18,2) NOT NULL,&#10;    PRIMARY KEY (MaHD, MaBienThe)&#10;)&#10;```&#10;&#10;### **Advanced Features Entities**&#10;&#10;#### **Returns &amp; Exchanges**&#10;```sql&#10;-- Return/Exchange Receipts (Phiếu Đổi Trả)&#10;PhieuDoiTra (&#10;    MaPhieuDT INT PRIMARY KEY IDENTITY,&#10;    MaHD INT FOREIGN KEY REFERENCES HoaDon(MaHD),&#10;    LoaiPhieu VARCHAR(10) CHECK (LoaiPhieu IN ('DOI', 'TRA')),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    MaKH INT FOREIGN KEY REFERENCES KhachHang(MaKH),&#10;    LyDo NVARCHAR(500) NOT NULL,&#10;    TrangThai VARCHAR(20) DEFAULT 'PENDING',&#10;    TongTienHoan DECIMAL(18,2) DEFAULT 0,&#10;    NgayDuyet DATETIME,&#10;    NguoiDuyet INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    GhiChu NVARCHAR(500)&#10;)&#10;&#10;-- Return Details (Chi Tiết Phiếu Đổi Trả)&#10;ChiTietPhieuDoiTra (&#10;    MaPhieuDT INT FOREIGN KEY REFERENCES PhieuDoiTra(MaPhieuDT),&#10;    MaBienThe INT FOREIGN KEY REFERENCES BienTheSanPham(MaBienThe),&#10;    SoLuong INT NOT NULL,&#10;    GiaBan DECIMAL(18,2) NOT NULL,&#10;    LyDo NVARCHAR(200),&#10;    PRIMARY KEY (MaPhieuDT, MaBienThe)&#10;)&#10;```&#10;&#10;#### **Loyalty System**&#10;```sql&#10;-- Loyalty Cards (Thẻ Thân Thiết)&#10;TheThanThiet (&#10;    MaThe INT PRIMARY KEY IDENTITY,&#10;    MaKH INT UNIQUE FOREIGN KEY REFERENCES KhachHang(MaKH),&#10;    SoThe VARCHAR(20) UNIQUE NOT NULL,&#10;    LoaiThe VARCHAR(20) CHECK (LoaiThe IN ('BRONZE', 'SILVER', 'GOLD', 'PLATINUM', 'DIAMOND')),&#10;    DiemTichLuy INT DEFAULT 0,&#10;    DiemDaSuDung INT DEFAULT 0,&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    NgayCapNhat DATETIME DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1&#10;)&#10;&#10;-- Point History (Lịch Sử Điểm)&#10;LichSuDiem (&#10;    MaLS INT PRIMARY KEY IDENTITY,&#10;    MaThe INT FOREIGN KEY REFERENCES TheThanThiet(MaThe),&#10;    LoaiGiaoDich VARCHAR(20) CHECK (LoaiGiaoDich IN ('EARN', 'REDEEM', 'EXPIRE', 'ADJUST')),&#10;    SoDiem INT NOT NULL,&#10;    MaHD INT FOREIGN KEY REFERENCES HoaDon(MaHD),&#10;    NgayGiaoDich DATETIME DEFAULT GETDATE(),&#10;    MoTa NVARCHAR(200),&#10;    NguoiThucHien INT FOREIGN KEY REFERENCES NhanVien(MaNV)&#10;)&#10;```&#10;&#10;#### **Supplier Management**&#10;```sql&#10;-- Suppliers (Nhà Cung Cấp)&#10;NhaCungCap (&#10;    MaNCC INT PRIMARY KEY IDENTITY,&#10;    TenNCC NVARCHAR(200) NOT NULL,&#10;    DiaChi NVARCHAR(300),&#10;    DienThoai VARCHAR(20),&#10;    Email VARCHAR(100),&#10;    NguoiLienHe NVARCHAR(100),&#10;    ChucVuLienHe NVARCHAR(50),&#10;    NgayHopTac DATE DEFAULT GETDATE(),&#10;    TrangThai BIT DEFAULT 1,&#10;    Rating INT DEFAULT 0 CHECK (Rating BETWEEN 0 AND 5),&#10;    TongGiaTriMua DECIMAL(18,2) DEFAULT 0,&#10;    SoDonHang INT DEFAULT 0&#10;)&#10;&#10;-- Purchase Orders (Đơn Đặt Hàng)&#10;DonDatHang (&#10;    MaDDH INT PRIMARY KEY IDENTITY,&#10;    MaNCC INT FOREIGN KEY REFERENCES NhaCungCap(MaNCC),&#10;    MaNV INT FOREIGN KEY REFERENCES NhanVien(MaNV),&#10;    NgayTao DATETIME DEFAULT GETDATE(),&#10;    NgayDuKien DATE,&#10;    NgayGiaoHang DATE,&#10;    TrangThai VARCHAR(20) DEFAULT 'DRAFT',&#10;    TongTien DECIMAL(18,2) DEFAULT 0,&#10;    ThueVAT DECIMAL(5,2) DEFAULT 0,&#10;    PhiVanChuyen DECIMAL(18,2) DEFAULT 0,&#10;    TongThanhToan DECIMAL(18,2) DEFAULT 0&#10;)&#10;```&#10;&#10;### **Entity Relationships**&#10;&#10;#### **Core Relationships**&#10;- **DanhMuc** (1) → (N) **SanPham**: Category contains multiple products&#10;- **SanPham** (1) → (N) **BienTheSanPham**: Product has multiple variants&#10;- **MauSac** (1) → (N) **BienTheSanPham**: Color used in multiple variants&#10;- **KichThuoc** (1) → (N) **BienTheSanPham**: Size used in multiple variants&#10;- **NhanVien** (1) → (1) **TaiKhoan**: Employee has one account&#10;- **KhachHang** (1) → (N) **HoaDon**: Customer has multiple invoices&#10;- **NhanVien** (1) → (N) **HoaDon**: Employee creates multiple invoices&#10;- **HoaDon** (1) → (N) **ChiTietHoaDon**: Invoice has multiple line items&#10;- **BienTheSanPham** (1) → (N) **ChiTietHoaDon**: Variant sold in multiple invoices&#10;&#10;#### **Advanced Feature Relationships**&#10;- **HoaDon** (1) → (N) **PhieuDoiTra**: Invoice can have multiple returns&#10;- **PhieuDoiTra** (1) → (N) **ChiTietPhieuDoiTra**: Return has multiple items&#10;- **KhachHang** (1) → (1) **TheThanThiet**: Customer has one loyalty card&#10;- **TheThanThiet** (1) → (N) **LichSuDiem**: Card has point transaction history&#10;- **NhaCungCap** (1) → (N) **DonDatHang**: Supplier receives multiple orders&#10;&#10;##  User Interface&#10;&#10;### ** Design Principles**&#10;- **Responsive Layout**: Adapts to different screen sizes&#10;- **Intuitive Navigation**: Clear menu structure&#10;- **Role-Based UI**: Different interfaces for different user roles&#10;- **Consistent Styling**: Uniform look and feel across all screens&#10;&#10;###  Modern Login UI (Enhanced)&#10;A redesigned, user-friendly authentication screen delivering fast feedback, accessibility, and security.&#10;&#10;**Visual &amp; UX Enhancements**&#10;- Gradient header + soft shadow “card” layout&#10;- Rounded inputs with focus accent + subtle placeholders&#10;- Inline icons ( user,  lock,  show/hide password)&#10;- Progress indicator during async authentication (non-blocking UI)&#10;- Shake animation &amp; audible beep on failures&#10;- Inline caps lock warning (⚠ CAPS LOCK đang bật)&#10;&#10;**Productivity Shortcuts**&#10;| Action | Shortcut | Description |&#10;|--------|----------|-------------|&#10;| Submit login | Enter | When focus in user or password field |&#10;| Clear form | ESC | Resets all fields |&#10;| Quick clear | Ctrl+L | Clears &amp; focuses username |&#10;| Toggle password visibility | F2 / Checkbox / Eye icon | Shows / hides password |&#10;&#10;**Security &amp; Feedback**&#10;- Brute-force mitigation: temporary 5s lockout after 5 failed attempts (counter resets on success)&#10;- Inline validation (empty username, empty password, short password)&#10;- Password hidden by default; secure echo char restored after toggle&#10;- Remember Me (stores username only via java.util.prefs; optional &amp; revocable)&#10;&#10;**Accessibility &amp; Usability**&#10;- High-contrast focus borders &amp; error colors&#10;- Placeholder text disappears on focus for clarity&#10;- Keyboard-only friendly (no mouse required for full flow)&#10;- Consistent font stack (Segoe UI / system fallback)&#10;&#10;**Async Architecture**&#10;- Uses SwingWorker to avoid EDT blocking during credential verification&#10;- Progress bar + stateful button label (“Đang xử lý…”) while authenticating&#10;&#10;**State Flow Summary**&#10;```&#10;Idle → Validate Inputs → Async Login → (Success ➜ Session + Transition) | (Fail ➜ Error + Retry / Optional Lockout)&#10;```&#10;&#10;**Extensibility Hooks (Suggested Future Add‑ons)**&#10;- Dark mode toggle&#10;- Password strength meter (zxcvbn / entropy estimation)&#10;- Multi-factor prompt (TOTP / email code)&#10;- Internationalization of labels &amp; messages&#10;&#10;### ** Authentication Flow**&#10;```&#10;Login Screen → Role Verification → Main Dashboard → Feature Access&#10;```&#10;&#10;### **�� Role-Based Features**&#10;&#10;| Role | Product Mgmt | Employee Mgmt | Account Mgmt | Sales | Reports |&#10;|------|--------------|---------------|--------------|-------|---------|&#10;| **Admin** | ✅ Full | ✅ Full | ✅ Full | ✅ Full | ✅ Full |&#10;| **Manager** | ✅ Full | ❌ View Only | ❌ None | ✅ Full | ✅ Full |&#10;| **Staff** | ️ View Only | ❌ None | ❌ None | ✅ Limited | ️ View Only |&#10;&#10;##  Security &amp; Authentication&#10;&#10;### ** Authentication System**&#10;- **Secure Login**: Username/password with encryption&#10;- **Session Management**: Automatic timeout and cleanup&#10;- **Password Security**: BCrypt hashing with salt&#10;- **Brute Force Protection**: Account lockout mechanisms&#10;&#10;### ** Authorization System &amp; Role Management**&#10;&#10;The application implements a comprehensive **Role-Based Access Control (RBAC)** system with three distinct user roles and granular permission management.&#10;&#10;#### **️ Authorization Architecture**&#10;&#10;```java&#10;SessionManager (Singleton)&#10;    ↓&#10;RoleManager (Static Permission Checker)&#10;    ↓&#10;UI Components (Dynamic Role-Based Rendering)&#10;    ↓&#10;Controller Layer (Double Permission Check)&#10;```&#10;&#10;#### ** User Roles &amp; Hierarchy**&#10;&#10;| Role | Level | Description |&#10;|------|-------|-------------|&#10;| ** ADMIN** | 1 | System administrator with full access |&#10;| ** MANAGER** | 2 | Store manager with operational control |&#10;| ** STAFF** | 3 | Sales staff with limited access |&#10;&#10;#### ** Detailed Permission Matrix**&#10;&#10;| **Chức Năng** | **ADMIN** | **MANAGER** | **STAFF** |&#10;|---------------|-----------|-------------|-----------|&#10;| ** Quản lý tài khoản** | ✅ **Full Access** | ❌ **No Access** | ❌ **No Access** |&#10;| ** Quản lý nhân viên** | ✅ **Full Access** | ❌ **No Access** | ❌ **No Access** |&#10;| ** Quản lý danh mục** | ✅ **Create/Edit/Delete** | ✅ **Create/Edit/Delete** | ❌ **No Access** |&#10;| ** Quản lý màu sắc** | ✅ **Create/Edit/Delete** | ✅ **Create/Edit/Delete** | ❌ **No Access** |&#10;| ** Quản lý kích thước** | ✅ **Create/Edit/Delete** | ✅ **Create/Edit/Delete** | ❌ **No Access** |&#10;| ** Quản lý sản phẩm** | ✅ **Full CRUD** | ✅ **Full CRUD** | ️ **View Only** |&#10;| ** Quản lý khách hàng** | ✅ **Full CRUD** | ✅ **Full CRUD** | ✅ **Create/View** |&#10;| ** Quản lý hóa đơn** | ✅ **Full Access** | ✅ **Full Access** | ✅ **Create/View Own** |&#10;| ** Quản lý biến thể** | ✅ **Full CRUD** | ✅ **Full CRUD** | ✅ **View/Basic Edit** |&#10;| ** Xem báo cáo** | ✅ **All Reports** | ✅ **All Reports** | ❌ **No Access** |&#10;&#10;#### ** Implementation Details**&#10;&#10;##### **1. Session Management**&#10;```java&#10;public class SessionManager {&#10;    private static SessionManager instance;&#10;    private TaiKhoan currentUser;&#10;    private boolean isLoggedIn = false;&#10;    &#10;    public String getCurrentUserRole() {&#10;        return currentUser != null ? currentUser.getQuyen() : null;&#10;    }&#10;}&#10;```&#10;&#10;##### **2. Role Manager**&#10;```java&#10;public class RoleManager {&#10;    // Role constants&#10;    public static final String ADMIN = &quot;ADMIN&quot;;&#10;    public static final String MANAGER = &quot;MANAGER&quot;;&#10;    public static final String STAFF = &quot;STAFF&quot;;&#10;    &#10;    // Permission methods&#10;    public static boolean canAccessAccountManagement() {&#10;        return isAdmin();&#10;    }&#10;    &#10;    public static boolean canAccessProductConfiguration() {&#10;        return isManagerOrHigher();&#10;    }&#10;}&#10;```&#10;&#10;##### **3. UI Security Implementation**&#10;```java&#10;// Dynamic menu generation based on role&#10;if (RoleManager.canAccessAccountManagement()) {&#10;    JButton btnTaiKhoan = createMenuButton(&quot;Quản Lý Tài Khoản&quot;);&#10;    menuPanel.add(btnTaiKhoan);&#10;}&#10;&#10;// Double-check on action&#10;private void openTaiKhoanUI() {&#10;    if (!RoleManager.canAccessAccountManagement()) {&#10;        RoleManager.showAccessDeniedMessage(this, &quot;Admin&quot;);&#10;        return;&#10;    }&#10;    new TaiKhoanUI().setVisible(true);&#10;}&#10;```&#10;&#10;#### **️ Security Layers**&#10;&#10;##### **Layer 1: Authentication Check**&#10;```java&#10;if (!SessionManager.getInstance().isLoggedIn()) {&#10;    JOptionPane.showMessageDialog(null, &quot;Vui lòng đăng nhập trước!&quot;);&#10;    new LoginUI().setVisible(true);&#10;    return;&#10;}&#10;```&#10;&#10;##### **Layer 2: Authorization Check**&#10;```java&#10;if (!RoleManager.canAccessFeature()) {&#10;    RoleManager.showAccessDeniedMessage(this, &quot;Required Role&quot;);&#10;    this.dispose();&#10;    return;&#10;}&#10;```&#10;&#10;##### **Layer 3: UI Rendering**&#10;- Buttons only appear if user has permission&#10;- Dynamic menu generation based on role&#10;- Real-time permission validation&#10;&#10;##### **Layer 4: Controller Validation**&#10;- All controller actions verify permissions&#10;- Service layer enforces business rules&#10;- Database operations require authenticated session&#10;&#10;#### ** Password Security**&#10;&#10;```java&#10;public class PasswordUtils {&#10;    // BCrypt with salt for secure hashing&#10;    public static String hashPassword(String plainPassword) {&#10;        return BCrypt.hashpw(plainPassword, BCrypt.gensalt());&#10;    }&#10;    &#10;    public static boolean checkPassword(String plainPassword, String hashedPassword) {&#10;        return BCrypt.checkpw(plainPassword, hashedPassword);&#10;    }&#10;}&#10;```&#10;&#10;#### ** Access Control Flow**&#10;&#10;```mermaid&#10;graph TD&#10;    A[User Login] --&gt; B{Authentication Check}&#10;    B --&gt;|Success| C[SessionManager Stores User]&#10;    B --&gt;|Fail| D[Access Denied]&#10;    &#10;    C --&gt; E{Role Verification}&#10;    E --&gt; F[ADMIN - Full Access]&#10;    E --&gt; G[MANAGER - Limited Access]&#10;    E --&gt; H[STAFF - Basic Access]&#10;    &#10;    F --&gt; I[All Features Available]&#10;    G --&gt; J[Management Features Only]&#10;    H --&gt; K[Basic Operations Only]&#10;```&#10;&#10;#### **⚙️ Configuration**&#10;&#10;The role system is configured through the database `TaiKhoan` table:&#10;```sql&#10;TaiKhoan (&#10;    TenDangNhap VARCHAR(50) PRIMARY KEY,&#10;    MatKhau VARCHAR(100),        -- BCrypt hashed&#10;    MaNV INT,                    -- Employee reference&#10;    Quyen VARCHAR(20)            -- 'ADMIN', 'MANAGER', 'STAFF'&#10;)&#10;```&#10;&#10;### **️ Security Best Practices**&#10;- **Input Validation**: Comprehensive validation at all layers&#10;- **SQL Injection Prevention**: Parameterized queries with JPA&#10;- **XSS Prevention**: Input sanitization and encoding&#10;- **Error Handling**: No sensitive information in error messages&#10;- **Session Security**: Automatic logout and session timeout&#10;- **Multi-layer Authorization**: UI, Controller, and Service level checks&#10;- **Password Security**: BCrypt hashing with configurable rounds&#10;- **Audit Logging**: All critical operations logged with user context&#10;&#10;##  Usage Guide&#10;&#10;### ** Getting Started**&#10;&#10;#### **First Time Setup**&#10;1. **Start the Application**: Run `main.Main` class&#10;2. **Login Screen**: Use default admin credentials&#10;   - Username: `admin`&#10;   - Password: `admin123`&#10;3. **Change Default Password**: Immediately change the default admin password&#10;4. **Create Employees**: Add employee records before creating accounts&#10;5. **Setup Basic Data**: Add categories, colors, sizes before products&#10;&#10;#### **Default User Accounts**&#10;The system comes with pre-configured accounts for testing:&#10;&#10;| Username | Password | Role | Description |&#10;|----------|----------|------|-------------|&#10;| `admin` | `admin123` | ADMIN | System administrator |&#10;| `manager` | `manager123` | MANAGER | Store manager |&#10;| `staff` | `staff123` | STAFF | Sales staff |&#10;&#10;⚠️ **Security Note**: Change all default passwords in production!&#10;&#10;### ** User Management Workflow**&#10;&#10;#### **Creating New Employees**&#10;1. **Navigate**: Main Menu → Quản Lý Nhân Viên&#10;2. **Add Employee**: Click &quot;Thêm&quot; button&#10;3. **Fill Information**: Complete all required fields&#10;4. **Save**: Employee record is created with unique ID&#10;&#10;#### **Creating User Accounts**&#10;1. **Navigate**: Main Menu → Quản Lý Tài Khoản (Admin only)&#10;2. **Add Account**: Click &quot;Thêm&quot; button&#10;3. **Select Employee**: Choose from existing employee list&#10;4. **Set Role**: Assign appropriate role (ADMIN/MANAGER/STAFF)&#10;5. **Set Password**: Create secure password&#10;6. **Save**: Account is created and ready for use&#10;&#10;### ** Product Management Workflow**&#10;&#10;#### **Setting Up Product Catalog**&#10;1. **Categories First**: Create product categories&#10;   - Navigate: Main Menu → Quản Lý Danh Mục&#10;   - Add categories like &quot;Áo&quot;, &quot;Quần&quot;, &quot;Phụ kiện&quot;&#10;&#10;2. **Colors and Sizes**: Set up variants&#10;   - Colors: Main Menu → Quản Lý Màu Sắc&#10;   - Sizes: Main Menu → Qu���n Lý Kích Thước&#10;&#10;3. **Add Products**: Create base products&#10;   - Navigate: Main Menu → Quản Lý Sản Phẩm&#10;   - Add product with category assignment&#10;&#10;4. **Create Variants**: Add specific variants&#10;   - Navigate: Main Menu → Quản Lý Hàng Hóa&#10;   - Create variants with color, size, quantity, price&#10;&#10;### ** Sales Process Workflow**&#10;&#10;#### **Creating an Invoice**&#10;1. **Navigate**: Main Menu → Quản Lý Hóa Đơn&#10;2. **New Invoice**: Click &quot;Thêm Hóa Đơn&quot;&#10;3. **Customer Selection**:&#10;   - Select existing customer OR&#10;   - Create new customer on-the-fly&#10;4. **Add Products**:&#10;   - Search and select product variants&#10;   - Specify quantities&#10;   - System automatically calculates totals&#10;5. **Apply Discounts**: Apply loyalty card benefits or promotions&#10;6. **Complete Sale**: Save invoice and print receipt&#10;7. **Inventory Update**: Stock levels automatically adjusted&#10;&#10;#### **Processing Payments**&#10;1. **Payment Method**: Select from configured payment methods&#10;2. **Amount Calculation**: System calculates total with taxes/discounts&#10;3. **Loyalty Points**: Automatically award points to loyalty card holders&#10;4. **Receipt Generation**: Print or email PDF receipt&#10;&#10;### ** Returns &amp; Exchange Process**&#10;&#10;#### **Creating Return/Exchange**&#10;1. **Navigate**: Main Menu → Quản Lý Đổi Trả&#10;2. **New Return**: Click &quot;Tạo Phiếu Đổi Trả&quot;&#10;3. **Invoice Lookup**: Enter original invoice number&#10;4. **Validation**: System checks 30-day return policy&#10;5. **Select Items**: Choose items to return/exchange&#10;6. **Reason**: Specify return reason&#10;7. **Submit**: Create return request (Status: PENDING)&#10;&#10;#### **Approval Process** (Manager/Admin)&#10;1. **Review Returns**: View pending return requests&#10;2. **Approve/Reject**: Make decision with comments&#10;3. **Process Refund**: Handle refund if approved&#10;4. **Update Inventory**: Restore returned items to stock&#10;&#10;### ** Loyalty Card Management**&#10;&#10;#### **Creating Loyalty Cards**&#10;1. **Navigate**: Main Menu → Khách Hàng Thân Thiết&#10;2. **New Card**: Click &quot;Tạo Th�� Mới&quot;&#10;3. **Customer Selection**: Choose existing customer&#10;4. **Card Generation**: System generates unique card number&#10;5. **Initial Tier**: Starts at BRONZE level&#10;6. **Activation**: Card is immediately active&#10;&#10;#### **Point Management**&#10;- **Earning Points**: Automatic on purchases (1% of purchase amount)&#10;- **Tier Benefits**: Higher tiers get better rates and discounts&#10;- **Point Redemption**: Use points for discounts on future purchases&#10;- **Tier Upgrades**: Automatic based on spending thresholds&#10;&#10;### ** Reporting &amp; Analytics**&#10;&#10;#### **Accessing Reports**&#10;1. **Navigate**: Main Menu → Báo Cáo &amp; Thống Kê (Manager/Admin only)&#10;2. **Select Report Type**: Choose from available reports&#10;3. **Set Parameters**: Date ranges, filters, etc.&#10;4. **Generate**: View report on screen&#10;5. **Export**: Save as PDF or print&#10;&#10;#### **Available Reports**&#10;- **Revenue Reports**: Daily, weekly, monthly revenue analysis&#10;- **Product Performance**: Best/worst selling products&#10;- **Customer Analytics**: Customer behavior and preferences&#10;- **Inventory Reports**: Stock levels and turnover rates&#10;- **Employee Performance**: Sales performance by staff member&#10;&#10;### ** Supplier Management**&#10;&#10;#### **Managing Suppliers**&#10;1. **Navigate**: Main Menu → Quản Lý Nhà Cung Cấp&#10;2. **Add Supplier**: Complete supplier information&#10;3. **Rate Suppliers**: Track performance with 5-star rating&#10;4. **Purchase Orders**: Create orders for inventory replenishment&#10;5. **Track Deliveries**: Monitor order status and delivery&#10;&#10;### **⚙️ System Administration**&#10;&#10;#### **User Role Management**&#10;- **ADMIN**: Full system access, user management&#10;- **MANAGER**: Operations management, reports, no user management&#10;- **STAFF**: Sales operations, customer service, limited access&#10;&#10;#### **Data Backup**&#10;```sql&#10;-- Daily full backup&#10;BACKUP DATABASE QuanLyCuaHangQuanAo_Prod&#10;TO DISK = 'C:\Backups\QLCH_Full_YYYYMMDD.bak'&#10;WITH COMPRESSION, CHECKSUM;&#10;&#10;-- Hourly transaction log backup&#10;BACKUP LOG QuanLyCuaHangQuanAo_Prod&#10;TO DISK = 'C:\Backups\QLCH_Log_YYYYMMDD_HH.trn';&#10;```&#10;&#10;### **Monitoring &amp; Maintenance**&#10;&#10;#### **Application Monitoring**&#10;- **Log Monitoring**: Monitor application logs for errors&#10;- **Performance Metrics**: Track response times and throughput&#10;- **Database Monitoring**: Monitor SQL Server performance&#10;- **Disk Space**: Monitor storage usage&#10;- **Memory Usage**: Track JVM memory consumption&#10;&#10;#### **Regular Maintenance Tasks**&#10;- **Database Maintenance**: Update statistics, rebuild indexes&#10;- **Log Cleanup**: Archive and clean old log files&#10;- **Security Updates**: Apply Java and SQL Server updates&#10;- **Backup Verification**: Test backup restoration procedures&#10;- **Performance Tuning**: Optimize slow queries and operations&#10;&#10;##  Testing&#10;&#10;### **Manual Testing**&#10;&#10;#### **Test User Accounts**&#10;Use these accounts for testing different role functionalities:&#10;&#10;```&#10;Admin Account:&#10;- Username: admin&#10;- Password: admin123&#10;- Access: Full system access&#10;&#10;Manager Account:&#10;- Username: manager&#10;- Password: manager123&#10;- Access: Operations and reports&#10;&#10;Staff Account:&#10;- Username: staff&#10;- Password: staff123&#10;- Access: Sales and customer service&#10;```&#10;&#10;#### **Test Data**&#10;The system includes sample data for testing:&#10;- **Categories**: Áo, Quần, Phụ kiện&#10;- **Colors**: Đỏ, Xanh, Vàng, Đen, Trắng&#10;- **Sizes**: S, M, L, XL, XXL&#10;- **Sample Products**: Various clothing items with variants&#10;- **Test Customers**: Sample customer records&#10;&#10;#### **Testing Scenarios**&#10;&#10;**1. User Authentication Testing**&#10;```&#10;✅ Valid login with correct credentials&#10;✅ Invalid login with wrong credentials&#10;✅ Role-based access control&#10;✅ Session timeout functionality&#10;✅ Password change functionality&#10;```&#10;&#10;**2. Product Management Testing**&#10;```&#10;✅ Create/Edit/Delete categories&#10;✅ Create/Edit/Delete products&#10;✅ Create/Edit/Delete product variants&#10;✅ Search and filter functionality&#10;✅ Inventory tracking accuracy&#10;```&#10;&#10;**3. Sales Process Testing**&#10;```&#10;✅ Create invoice with customer&#10;✅ Add/remove products from invoice&#10;✅ Apply discounts and promotions&#10;✅ Generate PDF receipts&#10;✅ Inventory deduction verification&#10;```&#10;&#10;**4. Returns &amp; Exchange Testing**&#10;```&#10;✅ Create return within 30-day limit&#10;✅ Reject return outside time limit&#10;✅ Approval workflow testing&#10;✅ Inventory restoration verification&#10;✅ Refund processing&#10;```&#10;&#10;**5. Loyalty System Testing**&#10;```&#10;✅ Create loyalty cards&#10;✅ Point accumulation on purchases&#10;✅ Tier upgrade functionality&#10;✅ Point redemption process&#10;✅ Point history tracking&#10;```&#10;&#10;### **Database Testing**&#10;&#10;#### **Connection Testing**&#10;```bash&#10;# Test database connectivity&#10;mvn exec:java -Dexec.mainClass=&quot;main.Health&quot;&#10;&#10;# Expected output:&#10;# ✅ Kết nối JPA thành công!&#10;```&#10;&#10;#### **Data Integrity Testing**&#10;- **Foreign Key Constraints**: Verify referential integrity&#10;- **Data Validation**: Test business rule enforcement&#10;- **Transaction Rollback**: Test error handling and rollback&#10;- **Concurrent Access**: Test multi-user scenarios&#10;&#10;### **Performance Testing**&#10;&#10;#### **Load Testing Scenarios**&#10;- **Concurrent Users**: Test with multiple simultaneous users&#10;- **Large Datasets**: Test with thousands of products/customers&#10;- **Report Generation**: Test complex report performance&#10;- **Database Queries**: Monitor query execution times&#10;&#10;##  Deployment&#10;&#10;### **Production Deployment**&#10;&#10;#### **Server Requirements**&#10;- **OS**: Windows Server 2019+ or Linux (Ubuntu 20.04+)&#10;- **Java**: OpenJDK 21 or Oracle JDK 21&#10;- **Database**: SQL Server 2019+ (Standard or Enterprise)&#10;- **Memory**: 8GB RAM minimum (16GB recommended)&#10;- **Storage**: 50GB free space (SSD recommended)&#10;- **Network**: Stable internet connection for updates&#10;&#10;#### **Production Configuration**&#10;&#10;**1. Database Setup**&#10;```sql&#10;-- Create production database&#10;CREATE DATABASE QuanLyCuaHangQuanAo_Prod;&#10;&#10;-- Create dedicated user&#10;CREATE LOGIN qlch_user WITH PASSWORD = 'SecurePassword123!';&#10;USE QuanLyCuaHangQuanAo_Prod;&#10;CREATE USER qlch_user FOR LOGIN qlch_user;&#10;ALTER ROLE db_datareader ADD MEMBER qlch_user;&#10;ALTER ROLE db_datawriter ADD MEMBER qlch_user;&#10;```&#10;&#10;**2. Application Configuration**&#10;```xml&#10;&lt;!-- Production persistence.xml --&gt;&#10;&lt;property name=&quot;jakarta.persistence.jdbc.url&quot;&#10;          value=&quot;jdbc:sqlserver://prod-server:1433;databaseName=QuanLyCuaHangQuanAo_Prod;encrypt=true&quot;/&gt;&#10;&lt;property name=&quot;jakarta.persistence.jdbc.user&quot; value=&quot;qlch_user&quot;/&gt;&#10;&lt;property name=&quot;jakarta.persistence.jdbc.password&quot; value=&quot;SecurePassword123!&quot;/&gt;&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;false&quot;/&gt;&#10;&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;validate&quot;/&gt;&#10;```&#10;&#10;**3. Security Hardening**&#10;- Change all default passwords&#10;- Enable SQL Server encryption&#10;- Configure firewall rules&#10;- Set up SSL/TLS certificates&#10;- Enable audit logging&#10;- Regular security updates&#10;&#10;#### **Backup Strategy**&#10;```sql&#10;-- Daily full backup&#10;BACKUP DATABASE QuanLyCuaHangQuanAo_Prod&#10;TO DISK = 'C:\Backups\QLCH_Full_YYYYMMDD.bak'&#10;WITH COMPRESSION, CHECKSUM;&#10;&#10;-- Hourly transaction log backup&#10;BACKUP LOG QuanLyCuaHangQuanAo_Prod&#10;TO DISK = 'C:\Backups\QLCH_Log_YYYYMMDD_HH.trn';&#10;```&#10;&#10;### **Monitoring &amp; Maintenance**&#10;&#10;#### **Application Monitoring**&#10;- **Log Monitoring**: Monitor application logs for errors&#10;- **Performance Metrics**: Track response times and throughput&#10;- **Database Monitoring**: Monitor SQL Server performance&#10;- **Disk Space**: Monitor storage usage&#10;- **Memory Usage**: Track JVM memory consumption&#10;&#10;#### **Regular Maintenance Tasks**&#10;- **Database Maintenance**: Update statistics, rebuild indexes&#10;- **Log Cleanup**: Archive and clean old log files&#10;- **Security Updates**: Apply Java and SQL Server updates&#10;- **Backup Verification**: Test backup restoration procedures&#10;- **Performance Tuning**: Optimize slow queries and operations&#10;&#10;##  Contributing&#10;&#10;### **Development Guidelines**&#10;&#10;#### **Code Standards**&#10;- **Java Conventions**: Follow Oracle Java coding standards&#10;- **Naming**: Use descriptive Vietnamese names for business entities&#10;- **Documentation**: Comment complex business logic&#10;- **Error Handling**: Comprehensive exception handling&#10;- **Logging**: Appropriate logging levels and messages&#10;&#10;#### **Architecture Principles**&#10;- **Clean Architecture**: Maintain clear layer separation&#10;- **SOLID Principles**: Follow all five SOLID principles&#10;- **Design Patterns**: Use appropriate design patterns&#10;- **Dependency Injection**: Use the custom DI container&#10;- **Validation**: Validate at all appropriate layers&#10;&#10;#### **Database Guidelines**&#10;- **Naming**: Use Vietnamese names for tables and columns&#10;- **Constraints**: Define appropriate constraints and indexes&#10;- **Relationships**: Maintain referential integrity&#10;- **Performance**: Consider query performance in design&#10;- **Documentation**: Document complex business rules&#10;&#10;### **Contribution Process**&#10;&#10;#### **Setting Up Development Environment**&#10;1. **Fork Repository**: Create your own fork&#10;2. **Clone Locally**: Clone to your development machine&#10;3. **Setup Database**: Create local development database&#10;4. **Run Tests**: Ensure all tests pass&#10;5. **Create Branch**: Create feature branch for your work&#10;&#10;#### **Making Changes**&#10;1. **Follow Standards**: Adhere to coding standards&#10;2. **Write Tests**: Add tests for new functionality&#10;3. **Update Documentation**: Update README if needed&#10;4. **Test Thoroughly**: Test all affected functionality&#10;5. **Commit Changes**: Use descriptive commit messages&#10;&#10;#### **Submitting Changes**&#10;1. **Create Pull Request**: Submit PR with clear description&#10;2. **Code Review**: Address review feedback&#10;3. **Testing**: Ensure CI tests pass&#10;4. **Documentation**: Update any relevant documentation&#10;5. **Merge**: Maintainer will merge approved changes&#10;&#10;### **Reporting Issues**&#10;&#10;#### **Bug Reports**&#10;Include the following information:&#10;- **Environment**: OS, Java version, database version&#10;- **Steps to Reproduce**: Clear reproduction steps&#10;- **Expected Behavior**: What should happen&#10;- **Actual Behavior**: What actually happens&#10;- **Screenshots**: If applicable&#10;- **Logs**: Relevant error logs&#10;&#10;#### **Feature Requests**&#10;- **Use Case**: Describe the business need&#10;- **Proposed Solution**: Suggest implementation approach&#10;- **Alternatives**: Consider alternative solutions&#10;- **Impact**: Assess impact on existing functionality&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;### **MIT License Summary**&#10;- ✅ **Commercial Use**: Can be used commercially&#10;- ✅ **Modification**: Can be modified and distributed&#10;- ✅ **Distribution**: Can be distributed freely&#10;- ✅ **Private Use**: Can be used privately&#10;- ❌ **Liability**: No warranty or liability&#10;- ❌ **Warranty**: No warranty provided&#10;&#10;##  Troubleshooting&#10;&#10;### **Common Issues**&#10;&#10;#### **Database Connection Issues**&#10;&#10;**Problem**: Cannot connect to SQL Server&#10;```&#10;❌ Lỗi kết nối JPA: Connection refused&#10;```&#10;&#10;**Solutions**:&#10;1. **Check SQL Server Service**: Ensure SQL Server is running&#10;2. **Verify Connection String**: Check server name and port&#10;3. **Authentication**: Verify username and password&#10;4. **Firewall**: Check Windows Firewall settings&#10;5. **SQL Server Configuration**: Enable TCP/IP protocol&#10;&#10;```bash&#10;# Test connection manually&#10;sqlcmd -S localhost -U sa -P your_password&#10;```&#10;&#10;#### **Application Startup Issues**&#10;&#10;**Problem**: Application fails to start&#10;```&#10;❌ Failed to initialize application&#10;```&#10;&#10;**Solutions**:&#10;1. **Java Version**: Ensure Java 21 is installed&#10;2. **Dependencies**: Run `mvn clean install`&#10;3. **Database**: Verify database is accessible&#10;4. **Configuration**: Check persistence.xml settings&#10;5. **Logs**: Review application logs for specific errors&#10;&#10;#### **Login Issues**&#10;&#10;**Problem**: Cannot login with default credentials&#10;&#10;**Solutions**:&#10;1. **Database Data**: Verify user accounts exist in database&#10;2. **Password Hashing**: Check if passwords are properly hashed&#10;3. **Case Sensitivity**: Ensure correct case for username&#10;4. **Account Status**: Verify account is active&#10;&#10;```sql&#10;-- Check user accounts&#10;SELECT TenDangNhap, Quyen, TrangThai FROM TaiKhoan;&#10;```&#10;&#10;#### **Performance Issues**&#10;&#10;**Problem**: Application runs slowly&#10;&#10;**Solutions**:&#10;1. **Database Indexes**: Ensure proper indexing&#10;2. **Connection Pool**: Optimize HikariCP settings&#10;3. **JVM Memory**: Increase heap size if needed&#10;4. **Query Optimization**: Review slow queries&#10;5. **Hardware**: Check CPU and memory usage&#10;&#10;```bash&#10;# Increase JVM memory&#10;java -Xms1g -Xmx4g -jar QLCHQuanAo-1.0-SNAPSHOT.jar&#10;```&#10;&#10;#### **PDF Generation Issues**&#10;&#10;**Problem**: Cannot generate PDF receipts&#10;&#10;**Solutions**:&#10;1. **Font Installation**: Ensure Vietnamese fonts are available&#10;2. **File Permissions**: Check write permissions for temp directory&#10;3. **iText Dependencies**: Verify iText libraries are included&#10;4. **Memory**: Ensure sufficient memory for PDF generation&#10;&#10;### **Getting Help**&#10;&#10;#### **Documentation**&#10;- **README**: This comprehensive guide&#10;- **Code Comments**: Inline documentation in source code&#10;- **Database Schema**: ERD and table documentation&#10;- **API Documentation**: Service and controller documentation&#10;&#10;#### **Support Channels**&#10;- **GitHub Issues**: Report bugs and request features&#10;- **Code Review**: Submit pull requests for review&#10;- **Documentation**: Contribute to documentation improvements&#10;&#10;#### **Debugging Tips**&#10;&#10;**Enable Debug Logging**:&#10;```xml&#10;&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot;/&gt;&#10;&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot;/&gt;&#10;```&#10;&#10;**Check Application Logs**:&#10;```java&#10;// Look for these log patterns&#10;INFO: Application started successfully&#10;WARNING: Validation failed&#10;SEVERE: Database connection failed&#10;```&#10;&#10;**Database Debugging**:&#10;```sql&#10;-- Check table contents&#10;SELECT COUNT(*) FROM SanPham;&#10;SELECT COUNT(*) FROM TaiKhoan;&#10;SELECT COUNT(*) FROM HoaDon;&#10;&#10;-- Check recent activity&#10;SELECT TOP 10 * FROM HoaDon ORDER BY NgayLap DESC;&#10;```&#10;&#10;---&#10;&#10;##  Conclusion&#10;&#10;The **Quản Lý Cửa Hàng Quần Áo** system represents a comprehensive, enterprise-grade solution for clothing retail management. Built with modern Java technologies and following clean architecture principles, it provides a robust foundation for retail operations while maintaining flexibility for future enhancements.&#10;&#10;### **Key Achievements**&#10;- ✅ **Complete Business Solution**: End-to-end retail management&#10;- ✅ **Modern Architecture**: Clean, maintainable, and scalable design&#10;- ✅ **Security First**: Enterprise-grade security implementation&#10;- ✅ **User-Friendly**: Intuitive interface with role-based access&#10;- ✅ **Comprehensive Features**: From basic sales to advanced analytics&#10;- ✅ **Vietnamese Localization**: Fully localized for Vietnamese market&#10;&#10;### **Future Enhancements**&#10;-  **Web Interface**: Browser-based access&#10;-  **Mobile App**: Mobile point-of-sale application&#10;-  **API Integration**: REST API for third-party integrations&#10;-  **Advanced Analytics**: Machine learning for sales predictions&#10;-  **Multi-Store Support**: Support for multiple store locations&#10;-  **E-commerce Integration**: Online store connectivity&#10;&#10;**Happy Coding! **" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>